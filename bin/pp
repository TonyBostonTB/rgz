#!/bin/sh -e
#
# https://www.romanzolotarev.com/bin/pp
# Copyright 2018 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

main() {
	MAIL_TO='hi@romanzolotarev.com'
	MAIL_SUBJECT='romanzolotarev.com: pp'
	MAIL_QUEUE='/db/www/mail_queue'
	CUSTOMERS='/db/www/customers'
	PAGES='/htdocs/ppp'
	test "$REQUEST_METHOD" = "GET" && get
	test "$REQUEST_METHOD" = "POST" && post
	http500 'invalid method'
}


get() {
	url="${PAGES}${REQUEST_URI%%\?*}"
	if test "${url%%/}" = "$url"
	then file="$url"
	else file="${url}index.html"
	fi

	test -f "$file" || http404 "$file"

	c="${HTTP_COOKIE##*customer=}"
	test "$HTTP_COOKIE" = "$c" && register_form
	c="${c%%;*}"
	test -d "$CUSTOMERS/$c" || register_form

	ap="${HTTP_COOKIE##*await_pin=}"
	test "$HTTP_COOKIE" != "$ap" &&
	test "${ap%%;*}" = 'true' &&
	test -f "$CUSTOMERS/$c/pin" && log_in_form

	s_key="${HTTP_COOKIE##*session_key=}"
	test "$HTTP_COOKIE" = "$s_key" && register_form
	s_key="${s_key%%;*}"
	test -f "$CUSTOMERS/$c/sessions/$s_key" || register_form

	test -f "$CUSTOMERS/$c/expires_at" || subscribe_form

	echo 'Status: 200 OK
Content-Type: text/html; charset=utf-8

'
	render_log_out_form
	cat "$file"
	exit 0
}


post() {
	query=$(read_query_string_post) || http500 'invalid post'
	a="${query##*action=}"
	test "$query" = "$a" && http500 'no action'

	case "${a%%&*}" in
		register)
			e="${query##*email=}"
			test "$query" = "$e" ||
			test -z "$e" && http401 'email is required'
			e=$(get_value "$query" 'email')
			register "$e"
			;;
		log_in)
			p="${query##*pin=}"
			test "$query" = "$p" ||
			test -z "$p" && http401 'pin is required'
			p=${p%%&*}

			e="${query##*email=}"
			test "$query" = "$e" ||
			test -z "$e" && http401 'email is required'
			e=$(get_value "$query" 'email')
			log_in "$e" "$p"
			;;
		subscribe)
			p="${query##*plan=}"
			test "$query" = "$p" ||
			test -z "$p" && http401 'invalid plan'
			p=${p%%&*}
			case "$p" in
				min) subscribe 60;;
				month) subscribe 2678400;;
				year) subscribe 31622400;;
				*) http500 'invalid plan';;
			esac
			;;
		log_out) log_out ;;
		register_again) register_again ;;
		kill_sessions) kill_sessions ;;
		*) http500 'invalid action';;
	esac
}


read_query_string_post() {
	test -n "$CONTENT_LENGTH" || http500 'invalid content'
	dd bs=1 count="$CONTENT_LENGTH" status=none
}


render_email_with_pin() {
	email="$1"
	url="$2"

	echo 'To: '"$email"'
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
Subject: '"${SERVER_NAME##www.}"': Complete your registration

Here is your PIN: '"$pin"'

Open this link to continue:

'"$url"'

---

If you did not want to register just ignore this.
Sent to: '"$email"'
'
}


render_email_notification() {
	body="$1"

	echo 'To: '"$MAIL_TO"'
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit
Subject: '"${SERVER_NAME##www.}"': New customer

'"$body"
}


get_value() {
	# h/t Devin Teske
	test -n "$1" || { echo; return; }
	x="${1##*$2=}"
	test "$x" = "$1" && { echo; return; }

	# shellcheck disable=1004
	echo "${x%%&*}" | awk '
	BEGIN { for (n = 0; n < 256; n++) chr[n] = sprintf("%c",n) } {
		t = $0
		a = ""
		gsub(/\+/, " ", t)
		while( match(t, /%[[:xdigit:]][[:xdigit:]]/) ) {
			a = a substr(t, 1, RSTART-1)\
			chr[ sprintf("%u", "0x" substr(t, RSTART+1, 2))]
			t = substr(t, RSTART+RLENGTH)
		}
		a = a t
		print a
	}'
}


encode_value() {
	test -n "$1" || { echo; return; }
	echo "$1" | awk '
	BEGIN {
		output = ""
		for (n = 0; n < 256; n++) pack[sprintf("%c", n)] = sprintf("%%%02x", n) } {
		sline = ""
		slen = length($0)
		for (n = 1; n <= slen; n++) {
			char = substr($0, n, 1)
			if ( char !~ /^[[:alnum:]_]$/ ) char = pack[char]
			sline = sline char
		}
		output = output ( output ? "%0a" : "" ) sline
	}
	END { print output }'
}


log_in_form() {
	e=$(get_value "$QUERY_STRING" 'email')
	p=$(get_value "$QUERY_STRING" 'pin')

	echo 'Status: 200 OK
Content-Type: text/html; charset=utf-8

<form action='"$REQUEST_URI"' method=post>
<label>email</label>
<input type="email" autocorrect="off" specllcheck="false" required="required"
minlength="2" maxlength="255" autofocus="autofocus" name="email" value="'"$e"'">
<label>pin</label>
<input type="text" autocorrect="off" specllcheck="false" required="required"
minlength="4" maxlength="4" name="pin" value="'"$p"'">
<input name="action" type="submit" value="log_in">
</form><form action='"$REQUEST_URI"' method=post>
<input name="action" type="hidden" value="register_again">
<input type="submit" value="&lt; start over">
</form>'
	exit 0
}


subscribe_form() {

	echo 'Status: 200 OK
Content-Type: text/html; charset=utf-8

<form action='"$REQUEST_URI"' method=post>
<label>select your plan:</label><br>
<input type="radio" name="plan" value="min"><label>min</label><br>
<input type="radio" name="plan" checked="checked" value="month"><label>month</label><br>
<input type="radio" name="plan" value="year"><label>year</label><br>
<input name="action" type="submit" value="subscribe">
</form>'
	render_log_out_form
	exit 0

}


kill_sessions() {
	c="${HTTP_COOKIE##*customer=}"
	test -z "$c" ||
	test "$HTTP_COOKIE" = "$c" && http401 'no subscriber'
	c="${c%%;*}"
	test -d "$CUSTOMERS/$c" || http401 'no subscriber'

	s_key="${HTTP_COOKIE##*session_key=}"
	test -z "$s_key" ||
	test "$HTTP_COOKIE" = "$s_key" && http401 'no session'
	s_key="${s_key%%;*}"
	test -f "$CUSTOMERS/$c/sessions/$s_key" || http401 'no session'

	find "$CUSTOMERS/$c/sessions" -type f ! -name "$s_key" -delete

	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo
	exit 0
}

render_log_out_form() {
	c="${HTTP_COOKIE##*customer=}"
	test -z "$c" ||
	test "$HTTP_COOKIE" = "$c" && http401 'no subscriber'
	c="${c%%;*}"
	test -d "$CUSTOMERS/$c" || http401 'no subscriber'

	s_key="${HTTP_COOKIE##*session_key=}"
	test -z "$s_key" ||
	test "$HTTP_COOKIE" = "$s_key" && http401 'no session'
	s_key="${s_key%%;*}"
	test -f "$CUSTOMERS/$c/sessions/$s_key" || http401 'no session'

	cd "$CUSTOMERS/$c/sessions"
	sessions=$(find . -type f ! -name "$s_key"|wc -l|tr -d ' ')
	echo '<form action='"$REQUEST_URI"' method=post>
<input name="action" type="submit" value="log_out"></form>'

	if test "$sessions" -ge "1"
	then
		echo '<form action='"$REQUEST_URI"' method=post>'
		echo '<input name="action" type="hidden" value="kill_sessions">'
		test "$sessions" = 1 && echo 'there is one more active session'
		test "$sessions" -gt 1 && echo "there are $sessions other active sessions"
		echo '<br><input type="submit" value="terminate all other sessions">'
		echo '</form>'
	fi

	echo "<p>customer: $c<br>"
	echo "session_key: $s_key</p>"
}


register_form() {
	e="${QUERY_STRING##*email=}"
	test "$QUERY_STRING" = "$e" && e=''
	test -n "$e" && e=$(get_value "$QUERY_STRING" 'email')

	echo 'Status: 200 OK
Content-Type: text/html; charset=utf-8

<form action='"$REQUEST_URI"' method=post>
<label>email</label>
<input type="email" autocorrect="off" specllcheck="false" required="required"
minlength="2" maxlength="255" autofocus="autofocus" name="email" value="'"$e"'">
<input name="action" type="submit" value="register">
</form>'
	exit 0
}


register_again() {
	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: customer=; HttpOnly"
	echo "Set-Cookie: await_pin=false; HttpOnly"
	echo
	exit 0
}


log_out() {
	c="${HTTP_COOKIE##*customer=}"
	test -z "$c" ||
	test "$HTTP_COOKIE" = "$c" && http401 'no subscriber'
	c="${c%%;*}"
	test -d "$CUSTOMERS/$c" || http401 'no subscriber'

	s_key="${HTTP_COOKIE##*session_key=}"
	test -z "$s_key" ||
	test "$HTTP_COOKIE" = "$s_key" && http401 'no session'
	s_key="${s_key%%;*}"
	file="$CUSTOMERS/$c/sessions/$s_key"
	test -f "$file" || http401 'no session'

	rm "${file:?}" || http500 'cannot remove seesion'

	echo 'Status: 301 Moved Permanently'
	echo "Location: ${REQUEST_URI%%\?*}"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: customer=; HttpOnly"
	echo "Set-Cookie: session_key=; HttpOnly"
	echo "Set-Cookie: await_pin=false; HttpOnly"
	echo
	exit 0
}


register() {
	email="$1"
	pin=$(random_str 4)
	c=$(sha256 -qs "$email")
	dir="$CUSTOMERS/$c"
	mkdir -p "$dir" && chmod 0770 "$dir"
	file="$dir/pin"
	echo "$pin $REMOTE_ADDR" > "$file"
	chmod 0660 "$file"
	url="${HTTP_REFERER%%\?*}?email=$(encode_value "$email")&pin=$pin"

	mkdir -p "$MAIL_QUEUE" && chmod 0770 "$MAIL_QUEUE"

	file="$MAIL_QUEUE/pp-$c"
	render_email_with_pin "$email" "$url" > "$file"
	chmod 0660 "$file"

	echo 'Status: 301 Moved Permanently'
	echo "Location: ${REQUEST_URI%%\?*}?email=$(encode_value "$email")"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: customer=$c; HttpOnly"
	echo "Set-Cookie: await_pin=true; HttpOnly"
	echo
	exit 0
}


log_in() {
	email="$1"
	pin="$2"
	s_key=$(random_str 20)
	c=$(sha256 -qs "$email")
	p="$CUSTOMERS/$c/pin"
	test -f "$p" || http401 'pin has not been requested'
	test "$(cat "$p")" = "$pin $REMOTE_ADDR" || http401 'invalid pin or remote_addr'
	rm "$CUSTOMERS/$c/pin"

	file="$CUSTOMERS/$c/email"
	echo "$email" > "$file"
	chmod 0660 "$file"

	dir="$CUSTOMERS/$c/sessions"
	mkdir -p "$dir" && chmod 0770 "$dir"
	file="$dir/$s_key"
	echo "$REMOTE_ADDR" > "$file"
	chmod 0660 "$file"

	echo 'Status: 301 Moved Permanently'
	echo "Location: ${REQUEST_URI%%\?*}"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: await_pin=false; HttpOnly"
	echo "Set-Cookie: session_key=$s_key; HttpOnly"
	echo "Set-Cookie: customer=$c; HttpOnly"
	echo
	exit 0
}


subscribe() {
	c="${HTTP_COOKIE##*customer=}"
	test "$query" = "$c" ||
	test -z "$c" && http401 'no customer'
	c="${c%%;*}"

	s_key="${HTTP_COOKIE##*session_key=}"
	test "$HTTP_COOKIE" = "$s_key" ||
	test -z "$s_key" && http401 'no session'
	s_key="${s_key%%;*}"
	test -f "$CUSTOMERS/$c/sessions/$s_key" || http401 'no session'

	duration="$1"
	now="$(date +%s)"

	file="$CUSTOMERS/$c/expires_at"
	echo "$((now + duration))" > "$file"
	chmod 0660 "$file"

	dir="$CUSTOMERS/$c/subscriptions"
	mkdir -p "$dir" && chmod 0770 "$dir"
	echo "duration: $duration" > "$dir/$now"

	file="$MAIL_QUEUE/pp-n-$c"
	render_email_notification "email: $email\ncustomer: $c\nduration: $duration" > "$file"
	chmod 0660 "$file"

	echo 'Status: 301 Moved Permanently'
	echo "Location: ${REQUEST_URI%%\?*}"
	echo 'Content-Type: text/html; charset=utf-8'
	echo
	exit 0
}


random_str() {
	jot -rcs '' "$1" 97 122
}


http500() {
	echo 'Status: 500 Internal Server Error'
	echo
	echo "500: $1"
	exit 1
}


http401() {
	echo 'Status: 401 Unauthorized'
	echo
	echo "401: $1"
	exit 1
}


http404() {
	echo 'Status: 404 Not Found'
	echo
	echo "404: $1"
	exit 1
}


main "$@"
