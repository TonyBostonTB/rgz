#!/bin/sh -e

main() {
	MAIL_QUEUE='/db/www/mail_queue'
	CUSTOMERS='/db/www/customers'
	NOW=$(date +%s)
	PAGES='/htdocs/ppp'
	mkdir -p "$CUSTOMERS"
	test -d "$PAGES" || http500 "$PAGES no such directory"

	case "$REQUEST_METHOD" in
		POST) post;;
		GET) get;;
		*) http500 'invalid';;
	esac
}

post() {
	query=$(read_query_string_post) || http500 'invalid post'
	action=$(get_value 'action' "$query")
	case "$action" in
		request_pin)
			email=$(get_value 'email' "$query")
			test -n "$email" || http401 'email is required'
			request_pin "$email"
			;;
		register)
			email=$(get_value 'email' "$query")
			pin=$(get_value 'pin' "$query")
			test -n "$email" || http401 'email is required'
			test -n "$pin" || http401 'pin is required'
			register "$email" "$pin"
			;;
		subscribe)
			c=$(get_cookie 'customer')
			plan=$(get_value 'plan' "$query")
			case "$plan" in
			min) subscribe "$c" 60;;
			month) subscribe "$c" "$((60 * 60 * 24 * 31))";;
			year) subscribe "$c" "$((60 * 60 * 24 * 366))";;
			*) http500 'invalid plan';;
			esac
			;;
		logout) logout ;;
		resend_pin) reset_cookies ;;
		*) http500 'invalid request';;
	esac
}

read_query_string_post() {
	test -n "$CONTENT_LENGTH" || http500 'invalid content length'
	dd bs=1 count="$CONTENT_LENGTH" status=none
}

get() {
	file=$(get_filename)
	test -f "$file" || http404 "$file"

	c=$(get_cookie 'customer')
	test -d "$CUSTOMERS/$c" || request_pin_form

	ap=$(get_cookie 'await_pin')
	test "$ap" = 'true' &&
	test -f "$CUSTOMERS/$c/pin" && register_form

	s_key=$(get_cookie 'session_key')
	test -f "$CUSTOMERS/$c/sessions/$s_key" || request_pin_form

	exp=$(get_last_sub_exp "$c")
	test -n "$exp" || subscribe_form
	test "$exp" -gt "$NOW" || subscribe_form

	http200 "$(
		echo "<pre>$c"
		echo "$exp $(expires_in "$exp")"
		echo "$s_key"
		(cd "$CUSTOMERS/$c/sessions" && find . -type f -exec echo {} \; -exec cat {} \;)
		echo "</pre>"
		echo '<form action='"$REQUEST_URI"' method=post>
<input name="action" type="submit" value="logout">
</form>'
		cat "$file"
	)"
}

render_email_with_pin() {
	email="$1"
	url="$2"
	meta="$SERVER_NAME $REMOTE_ADDR $(date '+%d/%b/%Y:%H:%M:%S %z')"

	echo "To: $email"
	echo 'MIME-Version: 1.0'
	echo 'Content-Type: text/plain; charset=utf-8'
	echo 'Content-Transfer-Encoding: 7bit'
	echo 'Subject: PIN'
	echo
	echo "$url"
	echo
	echo ---
	echo
	echo "$meta"
}


get_value() {
	echo "$2" |
	tr '&' '\n' |
	awk -F= '/^'"$1"'/{print$2}' |
	decode_url
}

decode_url() {
	# h/t Devin Teske
	# shellcheck disable=1004
	awk '
	BEGIN { for (n = 0; n < 256; n++) chr[n] = sprintf("%c",n) } {
		t = $0
		a = ""
		gsub(/\+/, " ", t)
		while( match(t, /%[[:xdigit:]][[:xdigit:]]/) ) {
			a = a substr(t, 1, RSTART-1)\
			chr[ sprintf("%u", "0x" substr(t, RSTART+1, 2))]
			t = substr(t, RSTART+RLENGTH)
		}
		a = a t
		print a
	}'
}

register_form() {
	p=$(get_value 'pin' "$QUERY_STRING")
	http200 '<form action='"$REQUEST_URI"' method=post>
<label>email</label>
<input type="email" autocorrect="off" specllcheck="false" required="required"
minlength="2" maxlength="255" autofocus="autofocus" name="email">
<label>pin</label>
<input type="text" autocorrect="off" specllcheck="false" required="required"
minlength="4" maxlength="4" name="pin" value="'"$p"'">
<input name="action" type="submit" value="register">
<input name="action" type="submit" value="resend_pin">
</form>'
}

subscribe_form() {
	http200 '<form action='"$REQUEST_URI"' method=post>
<label>select plan:</label><br>
<input type="radio" name="plan" value="min"><label>min</label><br>
<input type="radio" name="plan" checked="checked" value="month"><label>month</label><br>
<input type="radio" name="plan" value="year"><label>year</label><br>
<input name="action" type="submit" value="subscribe">
<input name="action" type="submit" value="logout">
</form>'
}

request_pin_form() {
	http200 '<form action='"$REQUEST_URI"' method=post>
<label>email</label>
<input type="email" autocorrect="off" specllcheck="false" required="required"
minlength="2" maxlength="255" autofocus="autofocus" name="email">
<input name="action" type="submit" value="request_pin">
</form>'
}

reset_cookies() {
	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: customer=; HttpOnly"
	echo "Set-Cookie: await_pin=false; HttpOnly"
	echo
	exit 0
}

logout() {
	c=$(get_cookie 'customer')
	s_key=$(get_cookie 'session_key')
	file="$CUSTOMERS/$c/sessions/$s_key"
	test -f "$file" || http500 'no such session key'
	rm "${file:?}"

	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: customer=; HttpOnly"
	echo "Set-Cookie: session_key=; HttpOnly"
	echo "Set-Cookie: await_pin=false; HttpOnly"
	echo
	exit 0
}

request_pin() {
	email="$1"
	pin=$(random_str 4)
	c=$(sha256 -qs "$email")
	dir="$CUSTOMERS/$c"
	mkdir -p "$dir"
	echo "$pin" > "$dir/pin"
	url="${HTTP_REFERER%%\?*}?pin=$pin"
	file="$MAIL_QUEUE/$(sha256 -qs "$c $pin")"
	mkdir -p "$MAIL_QUEUE"
	render_email_with_pin "$email" "$url" > "$file"

	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: customer=$c; HttpOnly"
	echo "Set-Cookie: await_pin=true; HttpOnly"
	echo
	exit 0
}

register() {
	email="$1"
	pin="$2"
	s_key=$(random_str 20)
	c=$(sha256 -qs "$email")
	p="$CUSTOMERS/$c/pin"
	test -f "$p" || http401 'pin has not been requested'
	test "$(cat "$p")" = "$pin" || http401 'invalid pin'
	rm "$CUSTOMERS/$c/pin"
	dir="$CUSTOMERS/$c/sessions"
	mkdir -p "$dir"
	echo "$NOW $REMOTE_ADDR $USER_AGENT" > "$dir/$s_key"

	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo 'Content-Type: text/html; charset=utf-8'
	echo "Set-Cookie: await_pin=false; HttpOnly"
	echo "Set-Cookie: session_key=$s_key; HttpOnly"
	echo "Set-Cookie: customer=$c; HttpOnly"
	echo
	exit 0
}

get_last_sub_exp() {
	awk '/exp/{print$2}' "$(
	find "$CUSTOMERS/$c/subs/" |
	sort -n |
	tail -n 1
	)"
}

extend_exp() {
	exp="$1"
	duration="$2"
	test -z "$exp" && echo $((NOW + duration)) && return
	test "$NOW" -lt "$exp" && echo $((exp + duration)) && return
	test "$NOW" -ge "$exp" && echo $((NOW + duration)) && return
}

subscribe() {
	c="$1"
	duration="$2"
	exp=$(extend_exp "$(get_last_sub_exp "$c")" "$duration")
	dir="$CUSTOMERS/$c/subs"
	mkdir -p "$dir"
	printf 'exp: %s\ntime: %s' "$exp" "$NOW" > "$dir/$NOW"

	echo 'Status: 301 Moved Permanently'
	echo "Location: $REQUEST_URI"
	echo 'Content-Type: text/html; charset=utf-8'
	echo
	exit 0
}

get_filename() {
	url="/htdocs/ppp${REQUEST_URI%%\?*}"
	test "${url%%/}" = "$url" && echo "$url" && return
	echo "${url}index.html"
}

get_cookie() {
	echo "$HTTP_COOKIE" | tr ';' '\n' |
	sed "/$1=/!d;s/ *$1=//g"
}

get_prop() {
	tr ';' '\n' < "$2" |
	sed "/$1=/!d;s/ *$1=//g"
}

random_str() {
	jot -rcs '' "$1" 97 122
}

http500() {
	echo 'Status: 500 Internal Server Error'
	echo
	echo "500: $1"
	exit 1
}

http404() {
	echo 'Status: 404 Not Found'
	echo
	echo "404: $1"
	exit 1
}

http401() {
	echo 'Status: 401 Unauthorized'
	echo
	echo "401: $1"
	exit 1
}

http301() {
	echo 'Status: 301 Moved Permanently'
	echo "Location: $1"
	echo
	exit 0
}

http200() {
	echo 'Status: 200 OK'
	echo 'Content-Type: text/html; charset=utf-8'
	echo
	echo "$1"
	exit 0
}

render_template() {
	# h/t Devin Teske
	awk '
	BEGIN {
		w = "[a-zA-Z_][a-zA-Z0-9_]*"
		var = sprintf("\\$(%s|{%s})", w, w)
	} {
		str = ""
		tail = $0
		while (match(tail, var)) {
			head = substr(tail, 1, RSTART - 1)
			repl = substr(tail, RSTART, RLENGTH)
			tail = substr(tail, RSTART + RLENGTH)
			if ((match(head, /\\+/) ? RLENGTH + 1 : 1) % 2 == 1) {
				sub(/^\$/, "", repl)
				gsub(/(^{|}$)/, "", repl)
				repl = ENVIRON[repl]
			}
			str = str head repl
		}
		str = str tail
		print str
	}'
}

expires_in() {
	printf 'expires '
	delta=$((exp - NOW))
	test "$delta" -lt      2 && echo                      'now'  && return
	test "$delta" -lt    120 && echo           "in $delta secs"  && return
	test "$delta" -lt   7320 && echo "in $((delta/   60)) mins"  && return
	test "$delta" -lt 172800 && echo "in $((delta/ 3660)) hours" && return
	test "$delta" -ge 172800 && echo "in $((delta/86400)) days"  && return
}


main "$@"
