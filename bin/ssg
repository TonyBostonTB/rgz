#!/bin/sh
#
# https://www.romanzolotarev.com/bin/ssg
# Copyright 2018 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

: "${AUTHOR_NAME:=Roman Zolotarev}"
: "${AUTHOR_EMAIL:=hi@romanzolotarev.com}"
: "${SERVER_NAME:=www.romanzolotarev.com}"
: "${SERVER_PROTO:=https}"
: "${COPYRIGHT_YEAR:=2016}"

##########################################################################

[ -n "$DOCS" ] || { echo "export DOCS <target_directory>"; exit 1; }
DOCS_PATH=$(readlink -fn "$DOCS")

[ "$2" = '--clean' ] && RSYNC_FLAGS='--delete-excluded' || RSYNC_FLAGS=''

INDEX_HTML_FILE="$DOCS_PATH/index.html"
CSS_FILE="$DOCS_PATH/styles.css"
RSS_FILE="$DOCS_PATH/rss.xml"
RSS_URL="$SERVER_PROTO://$SERVER_NAME/rss.xml"
RSS_AUTHOR="$AUTHOR_EMAIL ($AUTHOR_NAME)"
SITEMAP="$DOCS_PATH/sitemap.xml"

ANNOUNCEMENT_FILE="$PWD/announcement.html"
FOOTER_FILE="$PWD/footer.html"
HEADER_FILE="$PWD/header.html"
[ -f "$ANNOUNCEMENT_FILE" ] && ANNOUNCEMENT_TEXT=$(cat "$ANNOUNCEMENT_FILE")
[ -f "$HEADER_FILE"       ] && HEADER=$(cat "$HEADER_FILE") || HEADER="<a href=\"/\">Home</a> - <a href=\"/twitter.html\">Twitter</a>"
[ -f "$FOOTER_FILE"       ] && FOOTER=$(cat "$FOOTER_FILE") || FOOTER="Copyright $COPYRIGHT_YEAR&ndash;$(date +%Y) <a href=\"/about.html\">$AUTHOR_NAME</a>"

##########################################################################

usage() {
  echo "usage: DOCS=<target_directory>"
  echo
  echo '       ssg build [--clean]'
  echo '         | watch [--clean]'
  exit 1
}

copy_files() {
  [ "$(dirname "$DOCS_PATH")" = "$PWD" ] && self="/$(basename "$DOCS_PATH")/" || self="$DOCS_PATH"
  # shellcheck disable=2086
  rsync -a "." "$DOCS_PATH" $RSYNC_FLAGS \
    --exclude "$self" \
    --exclude ".*" \
    --exclude "_*"
}

md_to_html() {
  find "$DOCS_PATH" -type f -name '*.md'|while read -r file; do
    lowdown -D html-skiphtml -d metadata "$file" > "${file%\.md}.html" && rm "$file"
  done
}

index_to_rss() {
  date_rfc_822=$(date "+%a, %e %b %Y %H:%M:%S %z")
  echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\"><channel><atom:link href=\"$RSS_URL\" rel=\"self\" type=\"application/rss+xml\" /><title>$AUTHOR_NAME</title><description>A personal website about web technologies and development tools.</description><link>$SERVER_PROTO://$SERVER_NAME/</link><lastBuildDate>$date_rfc_822</lastBuildDate><managingEditor>$RSS_AUTHOR</managingEditor>" > "$RSS_FILE" 
  # filter first 20 lines with links and link titles (dates)
  grep '^<li><a href=".*" title="[^<]*">[^<]*<\/a>.*<\/li>.*' "$INDEX_HTML_FILE" |
  head -n20 |
  while read -r line; do 
    url=$(echo "$line" |sed 's/^<li><a href="\(.*\)" title="\([^<]*\)">\([^<]*\)<\/a>.*<\/li>.*/\1/g')
    date=$(echo "$line"|sed 's/^<li><a href="\(.*\)" title="\([^<]*\)">\([^<]*\)<\/a>.*<\/li>.*/\2/g')
    file="${DOCS_PATH}${url}"
    if [ -f "$file" ]; then 
      title="$(awk '/<[h1]*( id=".*")?>/{gsub(/<[^>]*>/,"");print($0);exit;}' "$file")"
      guid=$(sha256 -q "$file")
      # replace relative URIs with absolute URIs
      article=$(sed "s/\\([hrefsrc]*\\)=\"\\//\\1=\"$SERVER_PROTO:\\/\\/$SERVER_NAME\\//g" "$file")
      echo "<item><title>$title</title><guid isPermaLink=\"false\">$guid</guid><link>$SERVER_PROTO://${SERVER_NAME}$url</link><pubDate>$date 00:00:00 +0000</pubDate><description><![CDATA[$article]]></description></item>" >> "$RSS_FILE" 
    fi
  done
  echo '</channel></rss>' >> "$RSS_FILE"
}

wrap_html() {
  # generate sorted sitemap
  sitemap="$(find "$DOCS_PATH" -type f -name '*.html'|while read -r file; do
    awk '/<[h1]*( id=".*")?>/{gsub(/<[^>]*>/,"");print(FILENAME"===="$0);exit;}' "$file"
  done|sort)"
  # save sitemap in html and xml formats
  date=$(date +%Y-%m-%dT%H:%M:%S%z)
  echo '<?xml version="1.0" encoding="UTF-8"?><urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' > "$SITEMAP"
  echo "$sitemap"|while read -r line; do
    page=${line%====*}
    url=${page#$DOCS_PATH}
    case "$url" in
      /index.html) title='Home';;
      *) title="${line#*====}";;
    esac
    echo "<url><loc>$SERVER_PROTO://${SERVER_NAME}$url</loc><lastmod>$date</lastmod><priority>1.0</priority></url>" >> "$SITEMAP"
  done
  echo '</urlset>' >> "$SITEMAP"
  # generate html pages
  styles=$(cat "$CSS_FILE")
  echo "$sitemap"|while read -r line; do
    page=${line%====*}
    url=${page#$DOCS_PATH}
    article=$(cat "$page")
    [ -n "$ANNOUNCEMENT_TEXT" ] && announcement="<div class=\"announcement\"><div class=\"announcement__text\">$ANNOUNCEMENT_TEXT</div></div>"
    case "$url" in
      /index.html)
        title='Home'
        head_title="$AUTHOR_NAME"
        header__home=''
        ;;
      *)
        title="${line#*====}"
        head_title="$title - $AUTHOR_NAME"
        header__home="$HEADER"
        ;;
    esac
    # merge page with html template
    cat > "$page" <<EOF
<!DOCTYPE html><html lang="en">
<head><title>$head_title</title><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><meta name="referrer" content="no-referrer"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="alternate" type="application/atom+xml" href="/rss.xml"><link rel="icon" type="image/png" href="/favicon.png">
<style>$styles</style>
</head>
<body>
<script>!function(t){ t.addEventListener('DOMContentLoaded', function () { var l = t.querySelector('#light-off'); if (l === null) { console.log('Lights-out...'); } else { l.checked = t.cookie.match(/lightOff=true/) !== null; l.addEventListener('change', function () { t.cookie = 'lightOff=' + JSON.stringify(l.checked) + ';path=/'; }); } })}(document);</script><input class="light-off" type="checkbox" id="light-off">
<div class="page">
$announcement
<div class="header"><div class="header__left">$header__home</div><div class="header__right"><label for="light-off" class="light-off-button"></label></div></div>
<div class="article">$article</div>
<div class="footer">$FOOTER</div>
</div>
</body>
</html>
EOF
  done
  echo "$date $(echo "$sitemap"|wc -l|tr -d ' ')pp"
}

##########################################################################

case "$1" in

build)
  ls index.* >/dev/null 2>&1 || { echo 'no index.* found in the current directory'; exit 1; }
  which rsync >/dev/null 2>&1 || { echo 'rsync(1) should be installed'; exit 1; }
  which lowdown >/dev/null 2>&1 || { echo 'lowdown(1) should be installed'; exit 1; }
  printf 'building %s %s ' "$DOCS_PATH" "$RSYNC_FLAGS"
  copy_files
  md_to_html
  index_to_rss
  wrap_html
  ;;

watch)
  cmd="entr -d env DOCS=$DOCS $(basename "$0") build $RSYNC_FLAGS"
  pgrep -qf "$cmd" && { echo "already watching $DOCS"; exit 1; }
  echo "watching $PWD"
  which entr >/dev/null 2>&1 || { echo 'entr(1) should be installed'; exit 1; }
  while true; do
    find "$PWD" -type f \
      \( -name "$(basename "$0")" -or -name '*.md' -or -name '*.html' -or -name '*.css' -or -name '*.txt' -or -name '*.jpeg' -or -name '*.png' \)\
      ! -name ".*" ! -path "*/.*" ! -path "*/node_modules*" ! -path "${DOCS_PATH}*" |
      $cmd
  done
  ;;

*) usage;;

esac
