#!/bin/sh
#
# https://www.romanzolotarev.com/bin/ssg2
# Copyright 2018 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
set -e

main() {
	is_def "$1"
	is_def "$2"
	is_def "$3" && title="$3"
 	is_dir "$1" && src=$(readlink -f "$1")
 	is_dir "$2" && dst=$(readlink -f "$2")

	# copy dirs, excluding _* and .*

	copy_dirs "$src" "$dst"

	# get a list of files modified after the previous run
	# output the list of files and save it to dst/.files,
	# render HTML and Markdown pages,
	# then copy the rest of files

 	fs=$(get_list_of_modified_files "$src" "$dst")

	[ -n "$fs" ] && {
	echo "$fs" | tee "$dst/.files"
	echo "$fs" | render_html_files "$src" "$dst" "$title"
	echo "$fs" | render_md_files   "$src" "$dst" "$title"
	echo "$fs" | copy_files "$src" "$dst"
	}

	# and show the file counter

	{ printf '[ssg] '
	[ -n "$fs" ] && echo "$fs" | wc -l |
	awk '{printf $1" file"}($1>"1"){print "s"}($1=="1"){print ""}' ||
	echo 'ok'
	} >&2
}


is_def() { [ -n "$1" ] ||
	{ echo "usage: ${0##*/} <src> <dst> <title>" >&2; exit 1; }; }


is_dir() { [ -d "$1" ] ||
	{ echo "${0##*/}: $1: No such directory" >&2; exit 2; }; }


copy_dirs() {
	cd "$1" || exit 3
	find . -type d ! -name '.' ! -path '*/_*' ! -path '*/.*' |
	cpio -pd "$2"
}

copy_files() {
	grep -Ev '.md$|.html$' |
	(cd "$1" && cpio -p "$2")
}

get_list_of_files() {
	cd "$1" || exit 3
	shift
	find . -type f ! -name '.' ! -path '*/.*' "$@" |
	sed 's#^\./##'
}


get_list_of_modified_files() {

	# return all files, if .files doesn't exist

	[ -f "$2/.files" ] ||
	{ get_list_of_files "$1" && return; }


	# get a list of newer files

	fs=$(get_list_of_files "$1" -newer "$2/.files")


	# if any of those files are partials (e.g. _header.html)
	# return all dependent files (e.g. html, md)
        # and partials themselves (e.g. css, js)

	partials='^_.*html$|^_.*js$|^_.*css$'
	dependants='.html$|.md$|.js$|.css$'

	echo "$fs" | grep -E "$partials" >/dev/null &&
	{ get_list_of_files "$1" | grep -E "$dependants"; return; }

	# otherwise return the list of newer files as is

	echo "$fs"
}


render_html_files() {
	grep '.html$' |
	while read -r f
	do render_page "$1" "3" < "$1/$f" > "$2/$f"
	done
}


render_md_files() {
	grep '.md$' |
	while read -r f
	do lowdown -D html-skiphtml -D smarty -d metadata "$1/$f" |
	render_page "$1" "$3" > "$2/${f%\.md}.html"
	done
}


render_page() {
	body=$(cat)
	title=$(echo "$body" | grep '^<h1' | head -1 | sed 's/<[^>]*>//g')
	[ -z "$title" ] && { echo "$body" && return; }

	cat <<-EOF
	<!DOCTYPE html>
	<html lang="en">
	<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="icon" type="image/png" href="/favicon.png">
	<title>$title - $2</title>
	$(
	[ -f "$1/_rss.html" ] && cat "$1/_rss.html"
	[ -f "$1/_styles.css" ] &&
	echo "<style>$(cat "$1/_styles.css")</style>"
	[ -f "$1/_scripts.js" ] &&
	echo "<script>$(cat "$1/_scripts.js")</script>"
	)
	</head>
	<body>
	$([ -f "$1/_header.html" ] && cat "$1/_header.html")
	$body
	$([ -f "$1/_footer.html" ] && cat "$1/_footer.html")
	</body>
	</html>
	EOF
}


main "$@"
