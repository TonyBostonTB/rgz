<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="https://www.romanzolotarev.com/rss.xml" rel="self" type="application/rss+xml" />
<title>Roman Zolotarev</title><description>A personal website about web technologes and development tools.</description>
<link>https://www.romanzolotarev.com/</link>
<lastBuildDate>Sat, 21 Apr 2018 23:53:24 +0300</lastBuildDate>
<managingEditor>hi@romanzolotarev.com (Roman Zolotarev)</managingEditor>
<item><title>Enable HTTPS on OpenBSD with Let&#8217;s Encrypt and acme-client(1)</title><guid isPermaLink="false">4a546989823d00fa04c688479bd1133ab14b1896e69808538f53de1cb1ddfdc2</guid>
<link>https://www.romanzolotarev.com/openbsd/acme-client.html</link><pubDate>13 Apr 2018 00:00:00 +0000</pubDate><description><![CDATA[<p>&#8220;&#8230;thanks for article itself this can help many people to give <a href="https://twitter.com/hashtag/OpenBSD">#OpenBSD</a> a chance.&#8221;
<div class="quote"><a href="https://mobile.twitter.com/vetelko/status/985095582174900224">
<img src="https://www.romanzolotarev.com/avatars/vetelko.jpeg" class="quote__avatar" title="14 Apr 2018" alt="Ve Telko (@vetelko)"></a>
<span class="quote__name">Ve Telko (@vetelko)</span></div></p>

<h1 id="Enable%20HTTPS%20on%20OpenBSD%20with%20Let&amp;#39;s%20Encrypt%20and%20acme-client(1)">Enable HTTPS on OpenBSD with Let&#8217;s Encrypt and acme-client(1)</h1>

<p>I assume you already have <a href="https://man.openbsd.org/httpd.8">httpd(8)</a>
running on your OpenBSD server. If it&#8217;s not, <a href="https://www.romanzolotarev.com/openbsd/webserver.html">then go ahead and
configure it</a>. I&#8217;ll wait for you here.</p>

<p>We are going to use <a href="https://letsencrypt.org">Let&#8217;s Encrypt</a> as a
certificate authority for Transport Layer Security (TLS) encryption.</p>

<p>Add or update your CAA records to inform Let&#8217;s Encrypt that they are
allowed to issue certificates for your domain.</p>

<pre><code>    example.com. 300 IN   CAA 0 issue letsencrypt.org
www.example.com. 300 IN   CAA 0 issue letsencrypt.org
</code></pre>

<p>To manage certificates we need to configure built-in
<a href="http://man.openbsd.org/acme-client.1">acme-client(1)</a>:</p>

<pre><code>www# vi /etc/acme-client.conf
</code></pre>

<p>Add these three sections:</p>

<pre><code>authority letsencrypt {
  api url &quot;https://acme-v01.api.letsencrypt.org/directory&quot;
  account key &quot;/etc/acme/letsencrypt-privkey.pem&quot;
}
authority letsencrypt-staging {
  api url &quot;https://acme-staging.api.letsencrypt.org/directory&quot;
  account key &quot;/etc/acme/letsencrypt-staging-privkey.pem&quot;
}
domain www.example.com {
  alternative names { example.com }
  domain key &quot;/etc/ssl/private/www.example.com.key&quot;
  domain certificate &quot;/etc/ssl/www.example.com.crt&quot;
  domain full chain certificate &quot;/etc/ssl/www.example.com.fullchain.pem&quot;
  sign with letsencrypt
}
</code></pre>

<p>Create directories:</p>

<pre><code>www# mkdir -p -m 700 /etc/acme
www# mkdir -p -m 700 /etc/ssl/acme/private
www# mkdir -p -m 755 /var/www/acme
</code></pre>

<p>Update <code>/etc/httpd.conf</code> to handle verification requests from Let&#8217;s Encrypt.
It should look like this:</p>

<pre><code>server &quot;www.example.com&quot; {
  listen on * port 80
  root &quot;/htdocs/www.example.com&quot;
  location &quot;/.well-known/acme-challenge/*&quot; {
    root { &quot;/acme&quot;, strip 2 }
  }
}

server &quot;example.com&quot; {
  listen on * port 80
  block return 301 &quot;http://www.example.com$REQUEST_URI&quot;
}
</code></pre>

<p>Check this configuration and restart <code>httpd</code>:</p>

<pre><code>www# httpd -n
configuration ok
www# rcctl restart httpd
httpd(ok)
httpd(ok)
www#
</code></pre>

<p>Let&#8217;s run <code>acme-client</code> to create new account and domain keys.</p>

<pre><code>www# acme-client -vAD www.example.com
...
acme-client: http://cert.int-x3.letsencrypt.org/: full chain
acme-client: cert.int-x3.letsencrypt.org: DNS: 104.73.25.126
acme-client: /etc/ssl/www.example.com.crt: created
acme-client: /etc/ssl/www.example.com.fullchain.pem: created
</code></pre>

<p>To renew certificates automatically edit the current crontab:</p>

<pre><code>www# crontab -e
</code></pre>

<p>Append this line:</p>

<pre><code>0 0 * * * acme-client www.example.com &amp;&amp; rcctl reload httpd
</code></pre>

<p>Save and exit:</p>

<pre><code>crontab: installing new crontab
www#
</code></pre>

<h2 id="Enable%20HTTPS%20and%20restart%20the%20daemon">Enable HTTPS and restart the daemon</h2>

<p>Now we have the new certificate and domain key, so we can re-configure
<code>httpd</code> to handle HTTPS requests. Add two server sections to
<code>/etc/httpd.conf</code> for TLS. The result should look like this:</p>

<pre><code>server &quot;www.example.com&quot; {
  listen on * tls port 443
  root &quot;/htdocs/www.example.com&quot;
  tls {
    certificate &quot;/etc/ssl/www.example.com.fullchain.pem&quot;
    key &quot;/etc/ssl/private/www.example.com.key&quot;
  }
  location &quot;/.well-known/acme-challenge/*&quot; {
    root { &quot;/acme&quot;, strip 2 }
  }
}

server &quot;example.com&quot; {
  listen on * tls port 443
  tls {
    certificate &quot;/etc/ssl/www.example.com.fullchain.pem&quot;
    key &quot;/etc/ssl/private/www.example.com.key&quot;
  }
  location &quot;/.well-known/acme-challenge/*&quot; {
    root { &quot;/acme&quot;, strip 2 }
  }
  location * {
    block return 301 &quot;https://www.example.com$REQUEST_URI&quot;
  }
}

server &quot;www.example.com&quot; {
  listen on * port 80
  alias &quot;example.com&quot;
  block return 301 &quot;https://www.example.com$REQUEST_URI&quot;
}
</code></pre>

<p>Test this configuration and restart <code>httpd</code>:</p>

<pre><code>www# httpd -n
configuration ok
www# rcctl restart httpd
www#
</code></pre>

<p>To verify your setup <a href="https://www.ssllabs.com/ssltest/analyze.html">run SSL server test</a>.</p>

<p>Congratulation! Your website and its visitors are now secured.</p>

<hr/>

<p><strong>Thanks</strong> to <a href="https://twitter.com/gumnos">Tim Chase</a>,
<a href="https://twitter.com/mischapeters">Mischa Peters</a>, and <a href="https://twitter.com/vetelko">Ve
Telko</a> for reading drafts of this, to <a href="https://reykfloeter.com/">Reyk
Floeter</a> for <a href="https://bsd.plumbing">httpd(8)</a>
and to <a href="https://www.divelog.blue/">Kristaps Dzonsons</a> for
<a href="https://kristaps.bsd.lv/acme-client/">acme-client(1)</a>.</p>]]></description></item>
<item><title>Configure httpd(8) on OpenBSD for your web server</title><guid isPermaLink="false">229eb246d95379700ece489afeb86467eda3eadbdee2c16a072647b01b03e304</guid>
<link>https://www.romanzolotarev.com/openbsd/webserver.html</link><pubDate>12 Apr 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Configure%20OpenBSD%20httpd(8)%20on%20your%20web%20server">Configure OpenBSD httpd(8) on your web server</h1>

<p><a href="https://www.romanzolotarev.com/vultr.html">Deploy and login to your OpenBSD server first</a>.</p>

<p>As soon as you&#8217;re there you can enable an
<a href="http://man.openbsd.org/httpd.8">httpd(8)</a> daemon, it&#8217;s already installed
on OpenBSD, you just need to configure it:</p>

<pre><code>www# vi /etc/httpd.conf
</code></pre>

<p>Add two <code>server</code> sections&#8212;one for <code>www</code> and another for naked domain (all requests are
redirected to <code>www</code>).</p>

<pre><code>server &quot;www.example.com&quot; {
  listen on * port 80
  root &quot;/htdocs/www.example.com&quot;
}

server &quot;example.com&quot; {
  listen on * port 80
  block return 301 &quot;http://www.example.com$REQUEST_URI&quot;
}
</code></pre>

<p><code>httpd</code> is chrooted to <code>/var/www</code> by default, so let&#8217;s make a document
root directory:</p>

<pre><code>www# mkdir -p /var/www/htdocs/www.example.com
</code></pre>

<p>Save and check this configuration:</p>

<pre><code>www# httpd -n
configuration ok
</code></pre>

<p>Enable <code>httpd(8)</code> daemon and start it.</p>

<pre><code>www# rcctl enable httpd
www# rcctl start httpd
</code></pre>

<h2 id="Publish%20your%20website">Publish your website</h2>

<p>Copy your website content into <code>/var/www/htdocs/www.example.com</code> and then
test it your web browser.</p>

<pre><code>http://XXX.XXX.XXX.XXX/
</code></pre>

<p>Your web server should be up and running.</p>

<h2 id="Update%20DNS%20records">Update DNS records</h2>

<p>If there is another HTTPS server using this domain, configure that server
to redirect all HTTPS requests to HTTP.</p>

<p>Now as your new server is ready you can update DNS records accordingly.</p>

<pre><code>    example.com. 300 IN     A XXX.XXX.XXX.XXX
www.example.com. 300 IN     A XXX.XXX.XXX.XXX
</code></pre>

<p>Examine your DNS is propagated.</p>

<pre><code>$ dig example.com www.example.com
</code></pre>

<p>Check IP addresses it answer sections. If they are correct, you should be
able to access your new web server by its domain name.</p>

<pre><code>http://www.example.com/
</code></pre>

<p>What&#8217;s next? <a href="https://www.romanzolotarev.com/openbsd/acme-client.html">Enable HTTPS on your server</a>.</p>]]></description></item>
<item><title>Deploy a VPS on Vultr</title><guid isPermaLink="false">9b3404cb108539e7f924e159a256d53263980722c07ac6251a27769fc1c7a124</guid>
<link>https://www.romanzolotarev.com/vultr.html</link><pubDate>11 Apr 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Deploy%20a%20VPS%20on%20Vultr">Deploy a VPS on Vultr</h1>

<p>If you need a new server, make sure you have your <a href="https://www.romanzolotarev.com/ssh.html">public SSH
key</a> handy, then register at
<a href="https://www.vultr.com/?ref=7035749" title="Disclaimer: It&#39;s a referal
link">Vultr</a> and deploy your server.</p>

<p>For example:</p>

<ol>
<li>Server Location: <strong>Miami</strong></li>
<li>Server Type: 64 bit OS, <strong>OpenBSD 6 x64</strong></li>
<li>Server Size: 20 GB SSD <strong>$2.50/mo</strong> 1 CPU 512MB Memory 500GB Bandwidth</li>
<li>Additional Features: None</li>
<li>Start Script: None</li>
<li>SSH Keys: Add new key</li>
<li>Firewall Group: No firewall</li>
<li>Server Hostname &amp; Label: <strong>www</strong></li>
</ol>

<p>In a minute your sever will be deployed. Login using the new IP address
and your private SSH key (assuming it&#8217;s in the default location: <code>~/.ssh/id_ed25519</code>):</p>

<pre><code>$ ssh root@XXX.XXX.XXX.XXX
OpenBSD 6.3 (GENERIC.MP) #107: Sat Mar 24 14:21:59 MDT 2018

Welcome to OpenBSD: The proactively secure Unix-like operating
system.

Please use the sendbug(1) utility to report bugs in the system.
Before reporting a bug, please try to reproduce it with the
latest version of the code. With bug reports, please try to
ensure that enough information to reproduce the problem is
enclosed, and if a known fix for it exists, include that as
well.

www#
</code></pre>

<p>Yes, <code>root</code> login is enabled on Vultr servers by default. We better harden
a server right after its first boot, but this topic deserves its own post.</p>

<p>Now you can <a href="https://www.romanzolotarev.com/openbsd/webserver.html">setup a web server</a>.</p>]]></description></item>
<item><title>Generate your static site with lowdown(1)</title><guid isPermaLink="false">620e2b5d8c40d7ab86bcb7d82309d25fb2306d5478927042040a9857fc695199</guid>
<link>https://www.romanzolotarev.com/ssg.html</link><pubDate>07 Apr 2018 00:00:00 +0000</pubDate><description><![CDATA[<p>&#8220;It&#8217;s really inspiring to see you give back much to the community. I
appreciate your work - ssg, your how-to&#8217;s for less familiar
users, etc. I felt I should mention that to you &#x1F600;&#8221;
<div class="quote"><a href="https://mobile.twitter.com/h3artbl33d/status/985173503103074304">
<img src="https://www.romanzolotarev.com/avatars/h3artbl33d.jpeg" class="quote__avatar" title="14 Apr 2018" alt="H3artbl33d (@h3artbl33d)"></a>
<span class="quote__name">H3artbl33d (@h3artbl33d)</span></div></p>

<h1 id="Static%20site%20generator%20with%20rsync%20and%20lowdown">Static site generator with rsync and lowdown</h1>

<p><a href="https://www.romanzolotarev.com/bin/ssg">ssg</a> is less than two hundred lines of POSIX-compliant shell
script. It generates Markdown articles to a static website.</p>

<ol>
<li><p>It copies the current directory file tree to <code>docs/</code> with
<a href="https://rsync.samba.org/">rsync(1)</a>, ignoring <code>.*</code> and <code>_*</code>,</p></li>
<li><p>renders all Markdown articles to HTML with
<a href="https://kristaps.bsd.lv/lowdown/">lowdown(1)</a>,</p></li>
<li><p>extracts the first <code>&lt;h1&gt;</code> tag from every article to generate a
sitemap and use it as a page title,</p></li>
<li><p>then wraps articles with a single HTML template.</p></li>
</ol>

<p>To watch source file changes it depends on
<a href="http://entrproject.org/">entr(1)</a>, and for the local web server it relies
on <a href="https://man.openbsd.org/httpd.8">httpd(8)</a>.</p>

<p>Feel free to fork it and re-write for your needs.</p>

<h2 id="Install">Install</h2>

<p>Download <code>ssg</code>. For example, on OpenBSD:</p>

<pre><code>$ ftp https://www.romanzolotarev.com/bin/ssg
$ chmod +x ssg
</code></pre>

<h2 id="Build">Build</h2>

<p>For example your current directory looks like this:</p>

<pre><code>.
|-- .git/
|   |-- ...
|-- projects/
|   |-- build-a-rocket.md
|   |-- me-and-my-dog-on-the-moon.jpeg
|   `-- visit-the-moon.md
|-- about.md
|-- index.html
`-- index.css

$ ssg build
building /home/alice/src/www/docs  2018-04-10T10:56:52+0000 4pp
$
</code></pre>

<p>You have got a new directory <code>docs</code>.</p>

<pre><code>.
|
|-- .git/
|   |-- ...
|-- docs/
|   |-- projects/
|   |   |-- build-a-rocket.html
|   |   |-- me-and-my-dog-on-the-moon.jpeg
|   |   `-- visit-the-moon.html
|   |-- about.html
|   |-- index.html
|   |-- index.css
|   `-- sitemap.xml
|-- projects/
|   |-- ...
</code></pre>

<h2 id="Watch">Watch</h2>

<p>To re-build pages on change run:</p>

<pre><code>$ ssg watch
watching /home/alice/src/www
building /home/alice/src/www/docs  2018-04-10T11:04:11+0000 4pp
</code></pre>

<p><code>entr(1)</code> watches changes in <code>*.html</code>, <code>*.md</code>, <code>*.css</code>, <code>*.txt</code> files and
runs <code>ssg build</code> on every file change.</p>

<h2 id="Clean">Clean</h2>

<p>If you&#8217;d like to delete all files in the destination directory before
the build, then run:</p>

<pre><code>$ ssg build --clean
building /home/alice/src/www/docs --clean
2018-04-16T09:03:32+0000 4pp
$
</code></pre>

<p>The same option works for watching.</p>

<pre><code>$ ssg watch --clean
watching /home/alice/src/www
building /home/alice/src/www/docs --clean
2018-04-16T09:04:25+0000 4pp
</code></pre>

<h2 id="Preview">Preview</h2>

<p>To start a local web server run:</p>

<pre><code>$ ssg serve
listening http://127.0.0.1:4000
startup
</code></pre>

<p><code>ssg</code> starts <code>httpd(1)</code> in a debug mode and serves pages from
<a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>.</p>

<h2 id="Deploy">Deploy</h2>

<p>To deploy to remote server over SSH run:</p>

<pre><code>$ export DOCS=/var/www/htdocs
$ export REMOTE_HOST=www
$ export REMOME_DOCS=/var/www/htdocs
$ ssg delpoy
deploying /var/www/htdocs
to www:/var/www/htdocs... 4s
$
</code></pre>

<h2 id="Performance">Performance</h2>

<p><strong>100 pps</strong>. On modern computers <code>ssg</code> generates a hundred pages per second.
Half of a time for markdown rendering and another half for wrapping
articles into the template. I heard good static site generators
work&#8212;twice as fast&#8212;at 200 pps, so there&#8217;s lots of performance that can
be gained. ;)</p>

<h2 id="Known%20issues">Known issues</h2>

<ul>
<li>Don&#8217;t use <code>====</code> in a page title, <code>ssg</code> relies on this.</li>
</ul>

<hr/>

<p><strong>Thanks</strong> to <a href="https://twitter.com/h3artbl33d">h3artbl33d</a> and <a href="https://twitter.com/mischapeters">Mischa
Peters</a> for testing <code>ssg</code>, <a href="https://www.divelog.blue/">Kristaps
Dzonsons</a> for
<a href="https://kristaps.bsd.lv/lowdown/">lowdown(1)</a> and <a href="http://eradman.com">Eric
Radman</a> for <a href="http://entrproject.org">entr(1)</a>.</p>]]></description></item>
<item><title>Upgrade OpenBSD to 6.3</title><guid isPermaLink="false">25c1e512d823e47597ea864c1bfb8dab717ddbd8c014f5fe3d88a3c4945963fd</guid>
<link>https://www.romanzolotarev.com/openbsd/upgrade.html</link><pubDate>03 Apr 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Upgrade%20OpenBSD">Upgrade OpenBSD</h1>

<p><a href="https://www.openbsd.org/faq/upgrade63.html">Read the official FAQ first</a>.
Backup all your data first, then verify your backups. Download the install
image and verify its checksum:</p>

<pre><code># PKG_PATH=&#39;http://fastly.cdn.openbsd.org/pub/OpenBSD&#39;
# ftp $PKG_PATH/6.3/amd64/install63.fs
# ftp $PKG_PATH/6.3/amd64/SHA256.sig
# sha256 -C SHA256.sig install63.fs
(SHA256) install63.fs: OK
</code></pre>

<p>Plug in and check your USB flash drive:</p>

<pre><code># dmesg | grep removable | tail -n1
sd3 at scsibus5 targ 1 lun 0: &lt;Vendor, Model, 1.11&gt;
SCSI3 0/direct removable serial.12345678901234567890987654
</code></pre>

<p>In my case it appears as <code>sd3</code>. Now you can copy the installer image to
the USB flash drive. <strong>Be extremely cautious</strong>:</p>

<pre><code># dd if=install63.fs of=/dev/rsd3c bs=1m
</code></pre>

<p>Boot from that USB drive, then choose the <code>(S)hell</code> option to mount your
<a href="https://www.romanzolotarev.com/openbsd/fde.html">encrypted disk</a>.</p>

<pre><code># bioctl -c C -l /dev/sd0c softraid0
passphrase:
scsibus1 at softraid0: 1 targets
sd2 at scsibus2 targ 0 lun 0: &lt;OPENBSD, SR RAID 1, 005&gt;
SCSI2 0/direct fixed
sd2: 10244MB, 512 bytes/sec, 20980362 sec total
# exit
</code></pre>

<p>Choose the <code>(U)pgrade</code> option and follow the prompts.</p>]]></description></item>
<item><title>Generate strong passwords with a shell script</title><guid isPermaLink="false">dcc7430ade6b21a81137c352f24a6ad3708bb2153ca623b6e634731e4e9435ae</guid>
<link>https://www.romanzolotarev.com/diceware.html</link><pubDate>30 Mar 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Strong%20password%20generator">Strong password generator</h1>

<p><a href="https://www.romanzolotarev.com/bin/diceware">diceware</a> is a POSIX-compliant shell script. It generates
a random combination of words from the predefined list. It uses
<code>/dev/urandom</code> as the source of entropy, so make sure your operating
system provides good enough randomness.</p>

<p>Download and run <code>diceware</code>. Assuming <code>./bin</code> is in <code>PATH</code>.</p>

<pre><code>$ cd bin
$ ftp https://www.romanzolotarev.com/bin/diceware
$ chmod +x diceware
$ diceware
uerrilla agnostic backdoor glove jealous mummy myth sloth
$
</code></pre>

<p>On every run it generates a random 8-word pass phrase. You can write this
phrase down, just memorize it, or you can pipe it to your <a href="https://www.romanzolotarev.com/pass.html">favorite
password manager</a>:</p>

<pre><code>$ diceware | pass import twitter
$
</code></pre>

<p>Each word adds about 10 bits of entropy, so for passwords use 8 words or
more. Need more words? Easy:</p>

<pre><code>$ diceware 20
khaki hemoglobin artichoke cyclist coverless dictionary
vegetable sardine datebook ruined purse cytoplasm
absorbing narrator snapshot smitten cuticle journal
fiscally neither
$
</code></pre>

<h2 id="See%20also">See also</h2>

<p><a href="https://en.m.wikipedia.org/wiki/Diceware">Diceware</a>,
<a href="https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases">Deep Dive: EFF&#8217;s New Wordlists for Random Passphrases</a> by Joseph Bonneau,
<a href="https://m.xkcd.com/936/">xkcd: Password Strength</a></p>]]></description></item>
<item><title>Change time zone in OpenBSD</title><guid isPermaLink="false">67a19ef213cd5d4e74e5703c1a71e94852c36ffe3796066940c37d01e0092dde</guid>
<link>https://www.romanzolotarev.com/openbsd/timezone.html</link><pubDate>16 Mar 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Change%20time%20zone%20in%20OpenBSD">Change time zone in OpenBSD</h1>

<p>Link one of time zone files to <code>/etc/localtime</code>. For example, to&nbsp;<code>Asia/Singapore</code>:</p>

<pre><code># ln -sf /usr/share/zoneinfo/Asia/Singapore /etc/localtime
# date
Thu Apr  5 20:26:40 +08 2018
</code></pre>

<p>or simply use <a href="https://man.openbsd.org/zic.8">zic(8)</a> (in this example to&nbsp;<code>Europe/Moscow</code>):</p>

<pre><code># zic -l Europe/Moscow
# date
Thu Apr  5 15:26:51 MSK 2018
</code></pre>

<h2 id="See%20also">See also</h2>

<p><a href="https://man.openbsd.org/ln">ln(1)</a>,
<a href="https://man.openbsd.org/date">date(1)</a></p>]]></description></item>
<item><title>Backup with borg</title><guid isPermaLink="false">6f2354a5da15c11c99c6069e1dda99db8c70869239b52c6cfd9ab9a90571380b</guid>
<link>https://www.romanzolotarev.com/backup.html</link><pubDate>02 Mar 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Backup%20with%20borg">Backup with borg</h1>

<p>Install <a href="https://www.borgbackup.org/">BorgBackup</a>:</p>

<pre><code># pkg_add borgbackup-1.0.11
</code></pre>

<p>Initialize the repository:</p>

<pre><code>$ borg init -v &#39;~/backups&#39;
</code></pre>

<p>Create the first archive:</p>

<pre><code>$ borg create --list -p -s -v &quot;~/backups::$(date +%Y%m%d-%H%M)&quot;
</code></pre>

<p>To automate your backups let&#8217;s create a little shell script:</p>

<pre><code>#!/bin/sh
export BORG_REPO=&#39;USERNAME@SERVER.rsync.net:REPO&#39;
export BORG_REMOTE_PATH=&#39;/usr/local/bin/borg1/borg1&#39;
export BORG_RSH=&quot;ssh -i $HOME/.ssh/key&quot;
export BORG_PASSPHRASE=&#39;hoinaset&#39;
archive=$(date +%Y%m%d-%H%M)
borg create -C lzma,9 -p -s &quot;::$archive&quot; &quot;$HOME&quot;

borg prune -v --list --stats\
  --keep-hourly 48\
  --keep-daily 60\
  --keep-monthly 12\
  --keep-yearly 10\
  &#39;::&#39;
</code></pre>

<p>To check repository:</p>

<pre><code>$ borg check -v &#39;::&#39;
</code></pre>

<p>To extract</p>

<pre><code>$ borg extract -v --list &#39;::&#39; home/romanzolotarev/.vim/vimrc
</code></pre>

<h2 id="Removable%20storage">Removable storage</h2>

<pre><code># mkdir -p &quot;/mnt/$drive&quot;
# mount &quot;/dev/$drive&quot; &quot;/mnt/$drive&quot;
# umount &quot;/dev/$drive&quot;
</code></pre>

<h2 id="Remote%20storage">Remote storage</h2>

<p>You can setup your own server or use something like
<a href="http://www.rsync.net/products/attic.html">Rsync.net</a> account ($9/year for
25 GB or $0.36/year/GB).</p>]]></description></item>
<item><title>Mount drives on OpenBSD</title><guid isPermaLink="false">62864496e0db4bba637f892d6635983e3dde8fcbb4ab9f2d92bf4aa5bfb7f3fb</guid>
<link>https://www.romanzolotarev.com/openbsd/mount.html</link><pubDate>01 Mar 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Mount%20drives%20on%20OpenBSD">Mount drives on OpenBSD</h1>

<p>Only <code>root</code> can <a href="http://man.openbsd.com/mount.8">mount(8)</a> file systems on
OpenBSD, a regular user should use
<a href="http://man.openbsd.com/doas.1">doas(1)</a>.</p>

<p>Plug in your USB drive and check system messages:</p>

<pre><code># dmesg
sd1 at scsibus2 targ 1 lun 0: &lt;Vendor, Model, 1.26&gt;
SCSI3 0/direct removable serial.12345678901234568789
sd1: 7633MB, 512 bytes/sector, 15633408 sectors
</code></pre>

<p>Check partitions:</p>

<pre><code># disklabel sd1
...
          size     offset  fstype [fsize bsize   cpg]
  a:    736256       1024  4.2BSD   2048 16384 16142
  c:  15633408          0  unused
  i:       960         64   MSDOS
</code></pre>

<p>Let&#8217;s say you want to mount the first partition (<code>a:</code>), then the device
you&#8217;re looking for is <code>/dev/sd1a</code>. Create the mount point directory, say
<code>/mnt/usb-drive</code>, and mount the drive:</p>

<pre><code># mkdir -p /mnt/usb-drive
# mount /dev/sd1a /mnt/usb-drive
# ls /mnt/usb-drive
...
</code></pre>

<p>Hooray! Now it&#8217;s mounted.</p>

<p>Before disconnecting the drive from the USB port, make sure it&#8217;s
unmounted, to that you&#8217;ll need to leave mount point directory and then
use it as an argument for <a href="https://man.openbsd.org/umount.8">unmount(8)</a>.</p>

<pre><code># cd
# umount /mnt/usb-drive
#
</code></pre>

<p>Or you can address your device directly:</p>

<pre><code># cd
# umount /dev/sd1a
#
</code></pre>

<p>That&#8217;s it.</p>

<p>If you&#8217;d like to automate these steps, check <code>mnt()</code> and <code>umnt()</code>
functions from my <a href="https://www.romanzolotarev.com/openbsd/profile">~/.profile</a>.</p>]]></description></item>
<item><title>Print from the command line on macOS</title><guid isPermaLink="false">084a5d3110533892ccf12345f615877d043ca0d29f059878038ab67962536216</guid>
<link>https://www.romanzolotarev.com/macos/cups.html</link><pubDate>27 Feb 2018 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Printing%20from%20the%20command%20line%20on%20macOS">Printing from the command line on macOS</h1>

<p>Add a printer:</p>

<pre><code># lpadmin \
-p Printer                      # Arbitrary printer name \
-v ipp://192.168.1.10/ipp/print # device URI \
-P Vendor-Model.ppd             # path to the PPD file \
-E                              # enable accepting jobs
</code></pre>

<p>Check available printers:</p>

<pre><code>$ lpstat -a
Printer accepting requests since Sat Mar 31 23:59:32 2018
$
</code></pre>

<p>Print a document:</p>

<pre><code>$ lp -d Printer document.pdf
</code></pre>

<p>Delete the printer:</p>

<pre><code># lpadmin -x Printer
</code></pre>]]></description></item>
<item><title>Take a look at my fanless OpenBSD desktop setup</title><guid isPermaLink="false">5caadf3d96fb49eb2239d199ecf641b60576c0b861e9e971afb4f65c2ee749c9</guid>
<link>https://www.romanzolotarev.com/setup.html</link><pubDate>17 Nov 2017 00:00:00 +0000</pubDate><description><![CDATA[<p>&#8220;my X1 Carbon was delayed yet again&#8230; That @romanzolotarev will be ready
with his OpenBSD setup by the time it finally ships is the only good thing
about the delay. Tot stealing his work&#8221;
<div class="quote"><a href="https://mobile.twitter.com/zeRusski/status/930362868440162304">
<img src="https://www.romanzolotarev.com/avatars/zeRusski.jpeg" class="quote__avatar" title="14 Nov 2017" alt="Vlad Kozin (@zeRusski)"></a>
<span class="quote__name">Vlad Kozin (@zeRusski)</span></div></p>

<p>&#8220;Sweet rig, I know what I&#8217;m asking for on my next birthday!&#8221;
<div class="quote"><a href="https://mobile.twitter.com/smhhms/status/909899624948920320">
<img src="https://www.romanzolotarev.com/avatars/smhhms.jpeg" class="quote__avatar" title="18 Sep 2017" alt="Sean (@smhhms)"></a>
<span class="quote__name">Sean (@smhhms)</span></div></p>

<h1 id="OpenBSD%20on%20my%20fanless%20desktop%20computer">OpenBSD on my fanless desktop computer</h1>

<p>You asked me about my setup. Here you go.</p>

<p>I&#8217;ve been using <a href="https://www.romanzolotarev.com/openbsd/why.html">OpenBSD</a> on servers for years as a web
developer, but never had a chance to dive in to system administration
before. If you appreciate the simplicity of OpenBSD and you have to give
it a try on your desktop.</p>

<p>Bear in mind, this is a relatively <em>cheap ergonomic</em> setup, because all I
need is <a href="http://man.openbsd.org/xterm.1">xterm(1)</a> with <a href="https://www.romanzolotarev.com/vim.html">Vim</a>
and Firefox, I don&#8217;t care about CPU/GPU performance or mobility too much,
but I want a large screen and a good keyboard.</p>

<p><img src="https://www.romanzolotarev.com/setup.jpeg" alt="My desktop" title="2017" />
<em>This website has been made with this setup</em></p>

<table>
<thead>
<tr>
<th style="text-align: left">Item</th>
<th style="text-align: right">Price, USD</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left"><a href="https://www.zotac.com/us/product/mini_pcs/ci527-nano">Zotac CI527 NANO-BE</a></td>
<td style="text-align: right">371</td>
</tr>
<tr>
<td style="text-align: left">16GB RAM Crucial DDR4-2133</td>
<td style="text-align: right">127</td>
</tr>
<tr>
<td style="text-align: left">250GB SSD Samsung 850 EVO</td>
<td style="text-align: right">104</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://www.asus.com/Monitors/VZ249HE/">Asus VZ249HE</a> 23.8&quot; IPS Full HD</td>
<td style="text-align: right">129</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://ergodox-ez.com/products/ergodox-ez-original-standalone?variant=40172496643">ErgoDox EZ V3</a>, Cherry MX Brown, blank DCS</td>
<td style="text-align: right">325</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://www.kensington.com/us/us/4493/k72337us/orbit-trackball-with-scroll-ring">Kensington Orbit Trackball</a></td>
<td style="text-align: right">33</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: right"><strong>1,107</strong></td>
</tr>
</tbody>
</table>

<h2 id="OpenBSD">OpenBSD</h2>

<p>I tried few times to install OpenBSD on my MacBooks&#8212;I heard some models
are compatible with it,&#8212;but in my case it was a bit of a fiasco
(thanks to Nvidia and Broadcom). That&#8217;s why I bought a new computer, just
to be able to run this wonderful operating system.</p>

<p>Now I run <a href="https://www.openbsd.org/stable.html"><code>-stable</code></a> on my desktop
and servers. Servers are supposed to be reliable, that&#8217;s obvious, why not
run <code>-current</code> on a desktop? Because <code>-stable</code> is shipped every six months
and I that&#8217;s is often enough for me. I prefer <a href="https://www.youtube.com/watch?v=Wiw3YcwGwrU">slow
fashion</a>.</p>

<p>Regarding my window manager of choice: it&#8217;s
<a href="http://man.openbsd.org/cwm.1">cwm(1)</a>. It has tiling mode, so I don&#8217;t
have to rearrange windows manually.</p>

<p><img src="https://www.romanzolotarev.com/cwm.jpeg" alt="cwm" /></p>

<p>Here is my <a href="https://www.romanzolotarev.com/openbsd/cwmrc">.cwmrc</a>. Quite often I keep just two windows
open. On the left side: <a href="http://man.openbsd.org/tmux.1">tmux(1)</a> in
<a href="http://man.openbsd.org/xterm.1">xterm(1)</a>. On the right side: Firefox.</p>

<div class="quote"><a href="https://mobile.twitter.com/mischapeters/status/987004963682430976">
<img src="https://www.romanzolotarev.com/avatars/mischapeters.jpeg" class="quote__avatar" title="19 Apr 2018" alt="(((Mischa &#x1F576; &#x1F421; RCX))) (@mischapeters)"></a>
<span class="quote__text">It’s a nice .cwmrc! I even modeled mine after it. Recommended. 5&nbsp;stars.</span></div>

<h2 id="Zotac%20CI527">Zotac CI527</h2>

<pre><code>Intel Core i3-7100U, dual core 2.4 GHz CPU
RAM1: 16GB Crucial DDR4-2133 SODIMM CT16G4SFD8213
RAM2: empty
SATA: 250gB Samsung 850 EVO Series MZ-75E250BW
146.4 x 126.5 x 60.5 mm, VESA mount, DC 19V/65W

Intel HD Graphics 620
HDMI: 3840x2160 @ 60Hz
DisplayPort: 4096x2160 @ 60Hz
3-in-1 SD/SDHC/SDXC
Stereo output, Microphone
5 x USB 3.0 (1 front, 4 rear)
2 x USB 3.1 Type-C (front)
LAN Realtek 1000 Mbps
LAN Intel 1000 Mbps
Wifi 802.11ac
</code></pre>

<p>This machine is silent, thanks to passive cooling, has no moving parts.
That&#8217;s cool! Right? Of course, from time to time it gets literally hot,
but figuratively it stays cool all the time. ;)</p>

<p>According to <a href="https://man.openbsd.org/sysctl.8">sysctl(8)</a> its CPU is at
50&deg;C while it&#8217;s idle and up to 80&deg;C at the maximum load. It cools
down in five minutes.</p>

<p><img src="https://www.romanzolotarev.com/zotac-ci527.jpeg" alt="Zotac CI527" />
<em>Zotac CI527 with <a href="http://runbsd.nl">RUNBSD</a> sticker on the top</em></p>

<p>If you&#8217;re curious about the sticker, here is how it found me:</p>

<div class="quote"><a href="https://mobile.twitter.com/romanzolotarev/status/925424605367623680">
<img src="https://www.romanzolotarev.com/avatars/romanzolotarev.jpeg" class="quote__avatar" title="31 Oct 2017" alt="Roman Zolotarev (@romanzolotarev)"></a>
<span class="quote__text">Hi <a href="https://mobile.twitter.com/FiLiS">@FiLiS</a>, where can I buy those wonderful RUN BSD stickers?</span></div>

<div class="quote"><a href="https://mobile.twitter.com/FiLiS/status/925425396941770755">
<img src="https://www.romanzolotarev.com/avatars/FiLiS.jpeg" class="quote__avatar" title="31 Oct 2017" alt="Not Evander Sinque (@FiLiS)"></a>
<span class="quote__text">you can&#8217;t. You can DM me your address and I&#8217;ll send you some. :)</span></div>

<p>Two weeks later&#8230;</p>

<div class="quote"><a href="https://mobile.twitter.com/romanzolotarev/status/931467864896409600">
<img src="https://www.romanzolotarev.com/avatars/romanzolotarev.jpeg" class="quote__avatar" title="17 Nov 2017" alt="Roman Zolotarev (@romanzolotarev)"></a>
<span class="quote__text"><a href="https://mobile.twitter.com/hashtag/RUNBSD">#RUNBSD</a> It&#8217;s official now. Thank you <a href="https://mobile.twitter.com/FiLiS">@FiLiS</a></span></div>

<div class="quote"><a href="https://mobile.twitter.com/FiLiS/status/931619067185811459">
<img src="https://www.romanzolotarev.com/avatars/FiLiS.jpeg" class="quote__avatar" title="17 Nov 2017" alt="Not Evander Sinque (@FiLiS)"></a>
<span class="quote__text">You&#8217;re welcome. :)</span></div>

<p>Almost all the hardware is supported by OpenBSD 6.3 out-of-the-box. For
Intel network devices (LAN and WiFi) you&#8217;ll need firmware binary images.
OpenBSD downloads and installs them automatically on the first boot. I&#8217;ve
not tested DisplayPort and USB-C, but supposed to work.</p>

<p>Only Bluetooth doesn&#8217;t work because, well, <a href="https://marc.info/?l=openbsd-cvs&amp;m=140511572108715&amp;w=2">it
shouldn&#8217;t</a>.</p>

<p><em>&#8220;I&#8217;m not very familiar, but the implementation had too many issues for it to be salvageable, it was treated like a network protocol which turned out to be the wrong design. Commit message suggests it also simply didn&#8217;t work: <a href="https://marc.info/?l=openbsd-cvs&m=140511572108715&w=2">marc.info?l=openbsd-cvs&#8230;</a>&#8221;</em>
<div class="quote"><a href="https://mobile.twitter.com/canadianbryan/status/984782198887911425">
<img src="https://www.romanzolotarev.com/avatars/canadianbryan.jpeg" class="quote__avatar" title="13 Apr 2018" alt="Bryan Steele (@canadianbryan)"></a>
<span class="quote__name">Bryan Steele (@canadianbryan)</span></div></p>

<h2 id="ErgoDox%20EZ%20V3">ErgoDox EZ V3</h2>

<p>The ErgoDox is a DIY keyboard project initiated by Dominic Beauchamp. The
design is ergonomic, split in two separate halves with a columnar layout.</p>

<p><img src="https://www.romanzolotarev.com/ergodox-ez.jpeg" alt="ErgoDox" />
<em>The right half of ErgoDox EZ</em></p>

<p>Why EZ, not DIY kit? Wrist rest and tilt kit. High quality. Excellent
service. 2-year warranty. I have chosen ErgoDox with Cherry MX Brown
switches, blank DCS keycaps, and my custom single-layer layout.</p>

<p>Why Cherry MX Brown? Blue switches are louder than brown; other
switches are not that good for typing. If you are not sure, browns are the
great default choice.</p>

<p>Why DCS? I tried DSA for a month, but during that experiment, my
accuracy was lower than with DCS. With sculpted keycaps my fingers &#8220;know&#8221;
where they are, while it is a bit harder with DSA profile keycaps to find
home row.</p>

<p>Why blank keycaps? When I&#8217;m typing I look at my screen, not my keyboard.</p>

<h2 id="Asus%20VZ249HE">Asus VZ249HE</h2>

<p>I picked the cheapest 24&quot; IPS. It happens to be light-weight (2.9 kg) with
an slim profile (7mm) and 178&deg; viewing angles. It works great for
text, but for graphics I&#8217;d recommend 4K displays.</p>

<h2 id="Kensington%20Orbit%20Trackball">Kensington Orbit Trackball</h2>

<p>First, I use keyboard a lot. Rarely touch any pointing devices, just to
select a text in the browser or make a screenshot. Okay, I make quite a
few screenshots sometimes. :)</p>

<p>This trackball is definitely more comfortable then Apple Trackpad and much
better than Apple Magic Mouse.</p>

<p>Second, I had never used trackball before I bought this one, so it&#8217;s hard
to compare with other trackballs.</p>

<h2 id="Low%20tech">Low tech</h2>

<p>For notes I use <a href="https://fieldnotesbrand.com/products/original-kraft">Field Notes 48-page Memo Books</a>. In those
rare moments when I&#8217;m away from my computer I can jot things down at the
rate of two hundred pages per year.</p>

<p><img src="https://www.romanzolotarev.com/field-notes-memo-book.jpeg" alt="Field Notes Memo Book" />
<em>My first memo book. Circa 2012</em></p>

<p>Another thing is <a href="https://fieldnotesbrand.com/products/space-pen">Field Notes Space Pen</a>, which lasts forever: one
refill per thousand memo book pages.</p>

<p><img src="https://www.romanzolotarev.com/nokia-105.jpeg" alt="Nokia 105" />
<em>The charger, phone, memo book cover, and Space Pen.</em></p>

<p>My main phone is <a href="https://www.nokia.com/en_int/phones/nokia-105">Nokia
105</a>. No internet. No
camera. No distractions. It&#8217;s always on, one battery charge lasts for two
weeks.</p>

<p>Disclaimer: I still use Maps, Mail, Twitter, and Telegram on my old
iPhones, when I travel, because it&#8217;s a bit exhausting to carry display and
keyboard too far away from my <a href="https://www.ikea.com/us/en/catalog/products/S39932699/">IKEA desk</a>.</p>

<hr/>

<p>Have questions? Want to show your setup? <a href="https://mobile.twitter.com/romanzolotarev/status/909807483149066248">Let&#8217;s discuss on
Twitter</a>.</p>]]></description></item>
<item><title>Consider OpenBSD</title><guid isPermaLink="false">1ad0928d6004433890c6446293268fd0e3fab059dbeb4bba3307118c496eebdb</guid>
<link>https://www.romanzolotarev.com/openbsd/why.html</link><pubDate>15 Nov 2017 00:00:00 +0000</pubDate><description><![CDATA[<p>&#8220;.<a href="https://mobile.twitter.com/romanzolotarev">@romanzolotarev</a> motivated me to spend some more time in OpenBSD&#8221;
<div class="quote"><a href="https://mobile.twitter.com/wezm/status/987251788821684224">
<img src="https://www.romanzolotarev.com/avatars/wezm.jpeg" class="quote__avatar" title="20 April 2018" alt="Wesley Moore (@wezm)"></a>
<span class="quote__text">Wesley Moore (@wezm)</span></div></p>

<p>&#8220;Oh god. The first paragraph is so spot on it&#8217;s almost spooky. I&#8217;ve always dreamed of being able to boot into the terminal then open web browser just when I needed.&#8221;
<div class="quote"><a href="https://mobile.twitter.com/jesusgollonet/status/930376114110951424">
<img src="https://www.romanzolotarev.com/avatars/jesusgollonet.jpeg" class="quote__avatar" title="14 November 2017" alt="jes&uacute;s gollonet (@jesusgollonet)"></a>
<span class="quote__name">jes&uacute;s gollonet (@jesusgollonet)</span></div></p>

<p>&#8220;I&#8217;ve said it before, but <a href="https://mobile.twitter.com/mwlauthor">@mwlauthor</a> and <a href="https://mobile.twitter.com/romanzolotarev">@romanzolotarev</a> are the reasons I use OpenBSD&#8221;
<div class="quote"><a href="https://mobile.twitter.com/hir0pr0tagonist/status/986292987566149632">
<img src="https://www.romanzolotarev.com/avatars/hir0pr0tagonist.jpeg" class="quote__avatar" title="17 April 2018" alt="Tom A (@hir0pr0tagonist)"></a>
<span class="quote__name">Tom A (@hir0pr0tagonist)</span></div></p>

<p>&#8220;Guy knows what he&#8217;s talking about folks.&#8221;
<div class="quote"><a href="https://mobile.twitter.com/smhhms/status/930470965754114052">
<img src="https://www.romanzolotarev.com/avatars/smhhms.jpeg" class="quote__avatar" title="14 November 2017" alt="Sean (@smhhms)"></a>
<span class="quote__name">Sean (@smhhms)</span></div></p>

<h1 id="Why%20OpenBSD?">Why OpenBSD?</h1>

<p><a href="https://www.openbsd.org">OpenBSD</a> shines on servers, but if you do just
basic things on your desktop computer, then you&#8217;d love OpenBSD. In my case
switching from macOS was easy decision: <em>I use my computer as an
internet-enabled typewriter</em>. All I need for my work is a web browser,
terminal, and Vim.</p>

<h2 id="Known%20issues">Known issues</h2>

<p>OpenBSD works perfectly on mainstream hardware, but it doesn&#8217;t support
all the hardware. Bluetooth is not supported, at all; <a href="https://man.openbsd.org/?query=wireless&amp;apropos=1">only few wireless
chipsets</a> are
supported; 3D acceleration is supported for limited number of video cards;
USB3 audio is not here yet; etc.</p>

<p>The most popular open source software is ported to OpenBSD, but some of
the ports and packages can be outdated.</p>

<h2 id="Secure,%20correct,%20reliable">Secure, correct, reliable</h2>

<p>OpenBSD is a relatively small system, the dead code is actively removed to
reduce maintenance costs, improve quality, and minimize attack surface.</p>

<p>Everything I need is in the base: POSIX shell, X11, vi, tmux, httpd,
smptd. There are only things I need, almost nothing else. The base is well
documented, actively maintained, well integrated, nothing breaks
unexpectedly.</p>

<p>Files are neatly organized. They are always where you expect them to be.
Configuration files are clean. Defaults are sane, there is almost nothing
to customize.</p>

<p>Easy to upgrade. If you don&#8217;t use exotic software or hardware, upgrade
takes just few minutes (spent mostly on reading release notes).</p>

<p><strong><a href="https://www.romanzolotarev.com/openbsd/install.html">Install OpenBSD</a></strong></p>

<hr/>

<p>If you never tried BSD, don&#8217;t be afraid. <a href="https://mobile.twitter.com/romanzolotarev/lists/bsd/members">We are here to
help</a>.
<br>Have questions? <a href="https://mobile.twitter.com/romanzolotarev">Ping me on Twitter</a>.</p>]]></description></item>
<item><title>Enable full disk encryption on OpenBSD</title><guid isPermaLink="false">035e488f274cc95e0955afc1bab3ca43b66df9d396873be0377f38aeeda009aa</guid>
<link>https://www.romanzolotarev.com/openbsd/fde.html</link><pubDate>02 Nov 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Enable%20full%20disk%20encryption%20on%20OpenBSD">Enable full disk encryption on OpenBSD</h1>

<p>If you store sensitive data on your computer (e.g. passwords, keys,
private files) you better enable full disk encryption.</p>

<p>First of all you need to generate <a href="https://www.romanzolotarev.com/diceware.html">a secure passphrase</a>,
then boot OpenBSD installer and select <code>(S)hell</code>.</p>

<p>Note: Substitute <code>sd0</code> with the identifier of the target drive. All data
on <code>sd0</code> will be erased! Also check an identifier of the new crypto volume.
In my example it&#8217;s <code>sd3</code>.</p>

<pre><code>#!/bin/sh
set -e
drive=&#39;/dev/rsd0c&#39;
echo &quot;DANGER! All data on $drive will be erased. Press CTRL-C to cancel.&quot;
read -r
dd if=/dev/urandom of=&quot;$drive&quot; bs=1m count=1 status=none
fdisk -iy sd0 &gt;/dev/null
disklabel -E sd0 &gt;/dev/null &lt;&lt; EOF
z
a a
1024
*
RAID
w
q
EOF
bioctl -c C -l sd0a softraid0
cd /dev &amp;&amp; sh MAKEDEV sd3
dd if=/dev/zero of=/dev/rsd3c bs=1m count=1 status=none
echo &#39;Done! Please exit this shell to return to the main installer.&#39;
</code></pre>

<p>Optionally, you can automate few steps. Here is how I do it. Frist, enable
your internet connection:</p>

<pre><code># ifconfig re0 up
# dhclient re0
</code></pre>

<p>Then download and execute <a href="https://www.romanzolotarev.com/openbsd/fde.sh">the script</a>:</p>

<p>Be very careful, <strong>at this step you may lose all your data</strong>.</p>

<pre><code># ftp https://www.romanzolotarev.com/openbsd/fde.sh
# chmod +x
# fde.sh
# exit
</code></pre>

<h2 id="Return%20to%20the%20main%20installer">Return to the main installer</h2>

<p>When the installer asks <em>which disk is the root disk</em>, specify <code>sd3</code>.</p>

<h2 id="Post-install">Post-install</h2>

<p>When you booted OpenBSD from that crypto volume you can change the
passphrase with this command:</p>

<pre><code>doas bioctl -P sd3
</code></pre>

<h2 id="See%20also">See also</h2>

<p><a href="https://www.openbsd.org/faq/faq14.html">OpenBSD FAQ - Disk Setup</a></p>]]></description></item>
<item><title>Manage your passwords with openssl(1)</title><guid isPermaLink="false">0165501be6b3c10b511a0eb2e5d1c83beb5841f64f7b1130e40cabf1c09acbfe</guid>
<link>https://www.romanzolotarev.com/pass.html</link><pubDate>10 Oct 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Password%20manager%20powered%20by%20LibreSSL">Password manager powered by LibreSSL</h1>

<p><a href="https://www.romanzolotarev.com/bin/pass">pass</a> is a POSIX-compliant shell script. It works on OpenBSD
and macOS out-of-the-box, because it depends only on the software in the
base (for example: sh, openssl, tar, grep, cat).</p>

<p>Frankly, it has one 3rd-party dependency, if you need time-based one-time
passwords. If that is the case you need to install
<a href="http://www.nongnu.org/oath-toolkit/oathtool.1.html">oathtool(1)</a>.</p>

<pre><code># pkg_add oath-toolkit
</code></pre>

<p>Download and run <code>pass</code>. Assuming <code>./bin</code> is in <code>PATH</code>.</p>

<pre><code>$ cd bin
$ ftp https://www.romanzolotarev.com/bin/pass
$ chmod +x pass
$ pass
usage: export BASE_DIR=~/.pass
       export PRIVATE_KEY=~/.pass/.key
       export PUBLIC_KEY=~/.pass/.key.pub

       pass init
          | passphrase
          | add        id
          | import     id &lt;pass&gt;
          | show       id
          | export     id &lt;pass&gt;
          | ls        &lt;id&gt;
</code></pre>

<h2 id="Initialization">Initialization</h2>

<p>Create a directory for your passwords and generate your key pair.
Please pick <a href="https://www.romanzolotarev.com/diceware.html">a strong master pass phrase</a> for your keys.</p>

<pre><code>$ pass init
Generating public/private key pair.
New pass phrase:
Confirm:
Generating RSA private key, 2048 bit long modulus
..........................+++
..................+++
e is 65537 (0x10001)
writing RSA key
$ ls -1 ~/.pass
.key
.key.pub
$
</code></pre>

<p>Yep, as result you will get two files in <code>~/.pass</code> directory. These files are
your keys and they are protected with your master passphrase.</p>

<hr/>

<p><strong>Important!</strong> Backup these files, you won&#8217;t be able to recover any of
your passwords without the private key. Also make sure you remember your
pass phrase, there is no way to recover it either.</p>

<hr/>

<h2 id="Change%20pass%20phrase">Change pass phrase</h2>

<p>You can always change the master pass phrase for your private key.</p>

<pre><code>$ pass passphrase
Changing /home/romanzolotarev/.pass/.key pass phrase.
Current pass phrase:
New pass phrase:
Confirm:
Pass phrase changed.
$
</code></pre>

<h2 id="Add%20a%20password">Add a password</h2>

<p>Ready for the next step? Let&#8217;s add your first password. Run the following
command and enter your master pass phrase, then type-in the password and
hit Enter. In the second line type username and in the third line type
url. Press Enter and CTRL-D to save the password.</p>

<pre><code>$ pass add github
Pass phrase:
Press Enter and CTRL-D to complete.
always mule boots jaguar agnostic singles dalmatian vixen
username: romanzolotarev
url: https://github.com
$
</code></pre>

<h2 id="Import%20a%20password">Import a password</h2>

<p>Instead of typing your passwords manually you can pipe <a href="https://www.romanzolotarev.com/diceware.html">your favorite password
generator</a> right into <code>pass</code>.</p>

<pre><code>$ diceware | pass import twitter
Enter pass phrase for /home/romanzolotarev/.pass/.key:
$
</code></pre>

<h2 id="Edit%20the%20password">Edit the password</h2>

<p>If you want to update your password run:</p>

<pre><code>$ pass edit github
Enter pass phrase for /home/romanzolotarev/.pass/.key:
</code></pre>

<p>As soon as you enter the pass phrase <code>pass</code> opens <code>vi</code> with the content of
your password file. Let&#8217;s enable <a href="https://help.github.com/articles/providing-your-2fa-authentication-code/">2FA at
GitHub</a>
paste the TOTP seed from GitHub into the password file. For example:</p>

<pre><code>totp: fx33dwhsbw7esrda
</code></pre>

<p>When you&#8217;re done press <code>ZZ</code> to save and exit <code>vi</code>.</p>

<h2 id="Show%20the%20password">Show the password</h2>

<p>To show a password you can run:</p>

<pre><code>$ pass show twitter
pelican mule satchel headband yo-yo lemon luscious older
$
</code></pre>

<p>But if a password file has a line staring with <code>totp:</code>, then <code>pass</code> shows
one time password in the second line.</p>

<pre><code>$ pass show github
Enter pass phrase for /home/romanzolotarev/.pass/.key:
always mule boots jaguar agnostic singles dalmatian vixen
122635
$
</code></pre>

<h2 id="Export%20the%20password">Export the password</h2>

<p>If you want to see all lines of your password file, you can use <code>export</code></p>

<pre><code>$ pass export github
always mule boots jaguar agnostic singles dalmatian vixen
username: romanzolotarev
url: https://github.com
$
</code></pre>

<h2 id="List%20all%20passwords">List all passwords</h2>

<p>To list all your passwords run:</p>

<pre><code>$ pass ls
github
twitter
$
</code></pre>

<h2 id="Files">Files</h2>

<pre><code>.pass
|-- .key           - RSA private key protected by pass phrase
|-- .key.pub       - RSA public key
|-- github         - tar archive of two files:
|   |-- github.key - AES key encrypted with RSA public key
|   `-- github.enc - text file encrypted with AES key
|-- github.sig     - signature of tar archive created with
|                    RSA private key
</code></pre>

<p>Every time you change your password file <code>pass</code> generates tar archive with
a new AES key and a new signature. <code>pass</code> verifies the signature every
time you show or export the password.</p>

<h2 id="Environment%20variables">Environment variables</h2>

<p>To change path to the working directory or your keys, define
environment variables <code>BASE_DIR</code>, <code>PRIVATE_KEY</code>, <code>PUBLIC_KEY</code>. For example:</p>

<pre><code>$ BASE_DIR=~/.pass \
PRIVATE_KEY=~/.pass/.key \
PUBLIC_KEY=~/.pass/.key.pub pass init
...
</code></pre>]]></description></item>
<item><title>Configure YubiKey for login and SSH on OpenBSD</title><guid isPermaLink="false">3ba2a689f9a78487fd1776c67452b067a862b900466f44bdc5f7ca34f18b60ab</guid>
<link>https://www.romanzolotarev.com/openbsd/yubikey.html</link><pubDate>01 Sep 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Configure%20YubiKey%20for%20login%20and%20SSH%20on%20OpenBSD">Configure YubiKey for login and SSH on OpenBSD</h1>

<p>Make sure <a href="https://www.romanzolotarev.com/openbsd/install.html">OpenBSD is installed on your computer</a>,
you&#8217;re <code>root</code>, and you have at least one
<a href="https://www.yubico.com/store/">YubiKey</a>. First of all, install and start
<strong>YubiKey Personalization Tool</strong>:</p>

<pre><code># pkg_add yubikey-personalization-gui
# yubikey-personalization-gui
</code></pre>

<p>Insert your YubiKey into USB port. Click <strong>Yubico OTP</strong>, then <strong>Quick</strong>.
Select <strong>Configuration Slot 1</strong> or <strong>2</strong>. Click <strong>Write Configuration</strong>.
Important: save the log into <code>/tmp/log</code>. Click <strong>Exit</strong>.</p>

<p>Extract <em>uid</em> and <em>key</em> from the log, verify <code>/var/db/yubikey/*</code> files, and
remove the log.</p>

<pre><code># cd /var/db/yubikey
# grep Yubico /tmp/log | cut -f5 -d,&gt;$(whoami).uid
# grep Yubico /tmp/log | cut -f6 -d,&gt;$(whoami).key
# chown root:auth $(whoami).*
# chmod 440 $(whoami).*
# cat $(whoami).*
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxx
# rm /tmp/log
# rm $(whoami).ctr # reset the counter, if present
</code></pre>

<p>Change <code>auth-defaults</code> in <code>/etc/login.conf</code>:</p>

<pre><code>auth-defaults:auth=yubikey,passwd:
</code></pre>

<p>Update <code>/etc/ssh/sshd_config</code>:</p>

<pre><code>PermitRootLogin yes
AuthenticationMethods publickey,password
PasswordAuthentication yes
</code></pre>

<p>Restart <code>sshd</code>, verify, and <code>reboot</code>:</p>

<pre><code># rcctl restart sshd
# ssh root@localhost
root@localhost&#39;s password:
Last login: Fri Mar 30 12:36:23 2018
OpenBSD 6.2 (GENERIC.MP) #7: Sat Mar 17 21:38:36 CET 2018

Welcome to OpenBSD: The proactively secure Unix-like operating system.

Please use the sendbug(1) utility to report bugs in the system.
Before reporting a bug, please try to reproduce it with the latest
version of the code. With bug reports, please try to ensure that
enough information to reproduce the problem is enclosed, and if a
known fix for it exists, include that as well.

# exit
# reboot
</code></pre>

<h2 id="See%20also">See also</h2>

<p><a href="http://man.openbsd.com/login.conf.5">login.conf(5)</a>,
<a href="http://man.openbsd.com/login_yubikey.8">login_yubikey(8)</a>,
<a href="https://github.com/Yubico/yubikey-personalization-gui">YubiKey Personalization GUI</a></p>]]></description></item>
<item><title>Install OpenBSD on your desktop</title><guid isPermaLink="false">5ac8da3cb16fa17873b6747aa8a98ca480cb2a79ebf23ee3ca06621ffa1f34ee</guid>
<link>https://www.romanzolotarev.com/openbsd/install.html</link><pubDate>20 Sep 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Install%20OpenBSD%20on%20your%20desktop">Install OpenBSD on your desktop</h1>

<p>Why OpenBSD as a desktop? I like how simple and reliable it is. This guide
is the shortest way to try OpenBSD on your hardware. This may take just
few minutes. <a href="https://www.openbsd.org/faq/faq4.html">Read the official FAQ
first</a>.</p>

<p>Prepare a bootable USB drive. By the way, here is <a href="https://www.romanzolotarev.com/macos/openbsd.html">the step-by-step
instruction for macOS</a>.</p>

<p>Backup everything. As you follow this guide you may accidentally erase
your drives, so before we continue, please <strong>back up all your data</strong> and
verify your backups.</p>

<h2 id="Boot%20the%20installer">Boot the installer</h2>

<p><a href="https://www.romanzolotarev.com/openbsd/fde.html">Enable full disk encryption</a>, if you want to.</p>

<p>Boot from that USB drive. If you can&#8217;t boot OpenBSD try to enable
legacy-boot in your BIOS.</p>

<h2 id="Install%20OpenBSD%20base">Install OpenBSD base</h2>

<p>Select <code>(I)nstall</code> and answer the questions. Some hints:</p>

<ul>
<li>Location of sets: <code>disk</code></li>
<li>Which disk contains the install media: <code>sd1</code></li>
<li>Continue without verification: <code>yes</code></li>
</ul>

<p>If everything is okay:</p>

<pre><code>$ reboot
</code></pre>

<p>&#8230;and unplug the flash drive.</p>

<h2 id="After%20the%20first%20boot">After the first boot</h2>

<p>Boot OpenBSD from your drive, login as root, and run:</p>

<p>Set URL to download packages and updates</p>

<pre><code>echo &#39;https://cloudflare.cdn.openbsd.org/pub/OpenBSD&#39;\
&gt; /etc/installurl
</code></pre>

<p>Allow the user to run commands as root</p>

<pre><code>echo &#39;permit nopass romanzolotarev&#39;\
&gt; /etc/doas.conf
</code></pre>

<p>Done. Reboot and login as a regular user.</p>

<h2 id="Post-install">Post-install</h2>

<p>Install a tilling window manager and Firefox.</p>

<pre><code>doas pkg_add firefox
</code></pre>

<p>Make <code>cwm</code> your default window manager and start X11.</p>

<pre><code>echo &#39;cwm&#39; &gt;&gt; ~/.xinitrc
startx
</code></pre>

<p>As you may expect, these steps are easy to automate as well. <a href="https://www.romanzolotarev.com/openbsd/setup.sh">Check my
post-install script</a>.</p>]]></description></item>
<item><title>Prepare a bootable OpenBSD drive on macOS</title><guid isPermaLink="false">18588e6e801936fb03f646f25762bf0305ef12e35ff0561e0550bf8f31eb5e63</guid>
<link>https://www.romanzolotarev.com/macos/openbsd.html</link><pubDate>19 Sep 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Prepare%20a%20bootable%20OpenBSD%20drive%20on%20macOS">Prepare a bootable OpenBSD drive on macOS</h1>

<p>Download the installer:</p>

<pre><code>$ cd /tmp
$ export URL=https://cloudflare.cdn.openbsd.org/pub/OpenBSD
$ curl $URL/6.3/amd64/install63.fs
$ curl $URL/6.3/amd64/SHA256

$ grep install63.fs SHA256|cut -f4 -d&#39; &#39;
$ shasum -a 256 install63.fs|cut -f1 -d&#39; &#39;
</code></pre>

<p>Create install media. Plug your flash drive in. It should be at least 400
MB. Run <code>diskutil list</code> to find an identifier of the flash drive. Usually
it&#8217;s <code>/dev/disk2</code>.</p>

<p>Substitute <code>/dev/diskX</code> with the identifier of the flash drive. <strong>All data
on <code>/dev/diskX</code> will be erased!</strong></p>

<pre><code>$ sudo dd if=install62.fs of=/dev/diskX bs=1m
</code></pre>

<p>Wait few minutes and when it&#8217;s done, <a href="https://www.romanzolotarev.com/openbsd/install.html">try to boot and install
OpenBSD</a>.</p>]]></description></item>
<item><title>Learn Vim</title><guid isPermaLink="false">7f6217cf314b4b499ee42fd6357fdfdab327f1b70eeba5eb4ef2cf06119d2caa</guid>
<link>https://www.romanzolotarev.com/vim.html</link><pubDate>26 Aug 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Why%20should%20you%20learn%20Vim?">Why should you learn Vim?</h1>

<p>Considering Vim? Looking for a good reason to switch? Vim is a powerful
and simple text editor.</p>

<p>I use Vim for writing code, documentation, editing configuration files,
and taking notes. It works great for me. If it&#8217;s not your cup of tea,
that&#8217;s okay. There are many other text editors today.</p>

<p>Nowadays I edit all text files in
<a href="https://en.m.wikipedia.org/wiki/Vim">Vim</a> and
<a href="https://en.m.wikipedia.org/wiki/Vi">vi</a>,
but I used to use other editors as well:
<a href="https://en.m.wikipedia.org/wiki/Norton_Commander">Norton Commander</a>,
<a href="https://en.m.wikipedia.org/wiki/Microsoft_Notepad">Microsoft Notepad</a>,
<a href="https://en.m.wikipedia.org/wiki/Far_Manager">Far Manager</a>,
<a href="https://en.m.wikipedia.org/wiki/GNU_nano">GNU nano</a>,
<a href="https://en.m.wikipedia.org/wiki/Gedit">gedit</a>,
<a href="https://en.m.wikipedia.org/wiki/BBEdit">BBEdit</a>,
<a href="https://en.m.wikipedia.org/wiki/TextEdit">TextEdit</a>,
and <a href="https://en.m.wikipedia.org/wiki/Sublime_Text">Sublime Text</a>.</p>

<p>I tried
<a href="https://en.m.wikipedia.org/wiki/Atom_(text_editor)">Atom</a>,
<a href="https://en.m.wikipedia.org/wiki/Emacs">Emacs</a>,
<a href="https://en.m.wikipedia.org/wiki/Coda_(web_development_software)">Coda</a>,
<a href="https://en.m.wikipedia.org/wiki/Visual_Studio_Code">VSCode</a>,
<a href="https://en.m.wikipedia.org/wiki/Xcode">Xcode</a>,
<a href="https://en.m.wikipedia.org/wiki/JetBrains#WebStorm">WebStorm</a>,
<a href="https://en.m.wikipedia.org/wiki/TextMate">TextMate</a>,
<a href="https://en.m.wikipedia.org/wiki/Light_Table_(software)">Light Table</a>, and
few others, but not longer than for few days. Maybe someday I should
try Emacs again.</p>

<p>I used to use <a href="https://en.m.wikipedia.org/wiki/Microsoft_Word">Microsoft
Word</a>,
<a href="https://en.m.wikipedia.org/wiki/Pages_(word_processor)">Pages.app</a>, and
<a href="https://en.m.wikipedia.org/wiki/Google_Docs,_Sheets,_and_Slides">Google
Docs</a> a
lot, now I prefer <a href="https://www.romanzolotarev.com/markdown.html">Markdown</a> and <a href="https://www.romanzolotarev.com/ssg.html">ssg</a>.</p>

<p>So why did I switch to Vim? Why should you?</p>

<h2 id="Vim%20is%20powerful">Vim is powerful</h2>

<p>Vim has everything you may need for text editing out-of-the-box: syntax
highlighting, autocompletion, split screen, diff, spell checking, text
formatting, text objects, persistent undo, automatic commands, macros,
scripting, and many more.</p>

<p>Most of Vim features are kind of hidden and it makes sense, nothing stands
on your way when you are working. Although, such minimalism makes learning
curve a bit steeper.</p>

<p>On the other hand, everything in Vim is thoroughly documented and the
documentation is always available via <code>:help</code> command.</p>

<h2 id="Vim%20is%20keyboard-based">Vim is keyboard-based</h2>

<p>Usual Vim command is a sequence of keystrokes. You rarely use key chords
in Vim and you don&#8217;t need a mouse.</p>

<p>You can effortlessly make large edits <a href="https://vimgolf.com">with few
keystrokes</a>, because Vim has commands, movements, and
can operate text objects: paragraphs, sentences, words, etc. Everything is
mnemonic. For example, you can type <code>dap</code> in normal mode to <em>&#8220;delete a
paragraph&#8221;</em>, and <code>ciw</code> to <em>&#8220;change in word&#8221;</em>, and so on.</p>

<h2 id="Vim%20is%20extensible">Vim is extensible</h2>

<p>Vim can do a lot without any customization or plugins, but you can tailor
Vim for your needs. There are tons of plugins for Vim (you may need just
few), you can install and update them with ease.</p>

<p>Vim is well integrated with command line tools (<code>grep</code>, <code>git</code>, <code>head</code>,
<code>tail</code>, <code>tee</code>, <code>find</code>, <code>cp</code>, <code>mv</code>, <code>rm</code>, <code>cut</code>, <code>uniq</code>, <code>sort</code>, etc). With
pipes and redirects you can compose programs to do any text manipulations
you may need.</p>

<h2 id="Vim%20is%20fast">Vim is fast</h2>

<p>Vim doesn&#8217;t need a lot of resources <a href="https://github.com/jhallen/joes-sandbox/tree/master/editor-perf">to perform
well</a>.
Its startup time is <strong>under six milliseconds</strong>:</p>

<pre><code>$ vim -u NONE --startuptime vim.log +q
$ tail -n 1 vim.log | cut -f1 -d&#39; &#39;
005.287
</code></pre>

<p>To be fair, to start Vim with a dozen of plugins and to open a file takes
about 60 ms. Still impressive.</p>

<p>Vim almost never lags and typing latency is very low.
<a href="https://github.com/pavelfatin/typometer">Typometer</a> shows 4.8 ms for Vim
in Terminal.app on macOS.</p>

<p>Even when you are editing files on a remote machine over SSH and the
internet connection is slow, you still are in control, because in Vim you
can do a lot with a single command: quick jumps inside a large file,
switching among multiple files, searching and replacing across all files
in a project, etc.</p>

<p>Yes, Vim works perfectly in a terminal over SSH. You can edit files
remotely and be as productive as on your computer.</p>

<h2 id="Vim%20is%20future-proof">Vim is future-proof</h2>

<p>Vim (or its predecessor vi) is pre-installed on all Unix-like machines
(macOS, BSD, Linux). Vim has been ported to almost all operating systems,
including Windows.</p>

<p>Vim is a free and open-source software. It&#8217;s a time-tested software: vi
released in 1976, Vim &#8212; in 1991. Vim will stay around for a long time.
Once you learned Vim you may use it for decades. You workflow may change,
programming languages come and go, but Vim always does its job well.</p>

<hr/>

<p>Still undecided? Try Vim for a couple days.</p>]]></description></item>
<item><title>Keep your secrets in macOS Keychain</title><guid isPermaLink="false">12e737ca01fbce84e0ccd1ff6a96f3ef341da96838478bdcb5c71bfc5ebb805a</guid>
<link>https://www.romanzolotarev.com/macos/keychain.html</link><pubDate>16 May 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="Keep%20your%20secrets%20in%20macOS%20Keychain">Keep your secrets in macOS Keychain</h1>

<p>As a developer, you&#8217;re juggling many API keys and access tokens. Where
can you store them securely?</p>

<p>You can store arbitrary keys or tokens in the keychain built in to MacOS.
This solution only works on Macs, but it works out of the box on any Mac.</p>

<h2 id="Security%20for%20rescue">Security for rescue</h2>

<p><code>security</code> is a built-in command line interface to keychains and the
Security framework. To add a password to the default keychain, run:</p>

<pre><code>$ security add-generic-password -a ${USER} -s NAME -w
</code></pre>

<p>You have to specify your account name with <code>-a</code> and the service name with
<code>-s</code>. If you put <code>-w</code> at the end of the command you&#8217;ll be prompted to
enter the password.</p>

<p>To retrieve a password use:</p>

<pre><code>$ security find-generic-password -a ${USER} -s NAME -w
</code></pre>

<p>You can delete the password anytime:</p>

<pre><code>$ security delete-generic-password -a ${USER} -s NAME
</code></pre>

<h2 id="Use%20with%20a%20GitHub%20access%20token">Use with a GitHub access token</h2>

<p>Let&#8217;s use GitHub as an example. Add these functions to your <code>~/.bashrc</code></p>

<pre><code>  get_github_access_token () {
    token=$(curl -s https://api.github.com/authorizations \
        -H &quot;X-GitHub-OTP: ${1}&quot; \
        -u &quot;${USER}&quot; \
        -d &quot;{\&quot;scopes\&quot;: [\&quot;admin:public_key\&quot;], \&quot;note\&quot;: \&quot;$(hostname)-$(date +%s)\&quot;}&quot; \
        | jq -r .token)
    security delete-generic-password -a &quot;${USER}&quot; -s GitHub
    security add-generic-password -a &quot;${USER}&quot; -s GitHub -w &quot;$token&quot;
  }

add_ssh_key_to_github () {
  curl -s https://api.github.com/user/keys \
    -H &quot;Authorization: token $(security find-generic-password -a &quot;${USER}&quot; -s GitHub -w)&quot; \
    -d &quot;{\&quot;title\&quot;: \&quot;$(date +%s)\&quot;, \&quot;key\&quot;: \&quot;$(cat &quot;$1&quot;)\&quot;}&quot;
}

list_github_ssh_keys () {
  curl -s https://api.github.com/user/keys \
    -H &quot;Authorization: token $(security find-generic-password -a &quot;${USER}&quot; -s GitHub -w)&quot; \
    | jq &#39;map({title: .title, key:.key})&#39;
}
</code></pre>

<p>Then call <code>get_github_access_token</code> function with your GitHub OTP code as
an argument, assuming you have enabled two-factor authentication for your
GitHub account. For example:</p>

<pre><code>$ get_github_access_token XXXXXX
</code></pre>

<p>Enter your GitHub password and <code>security</code> will add the new GitHub access
token to your keychain.</p>

<p><a href="https://www.romanzolotarev.com/ssh.html">Generate your SSH key pair first</a>. To add your public SSH key run
this command:</p>

<pre><code>$ add_ssh_key_to_github ~/.ssh/key.pub
</code></pre>

<p>Later you can list the SSH keys associated with your GitHub account:</p>

<pre><code>$ list_github_ssh_keys
</code></pre>

<p>To learn more, read the <code>security</code> man page:</p>

<pre><code>$ man security
</code></pre>]]></description></item>
<item><title>Generate SSH keys</title><guid isPermaLink="false">846945e400face1ae121972aba0ee71772be1aac5a2ee3ca090eadcb400361d4</guid>
<link>https://www.romanzolotarev.com/ssh.html</link><pubDate>01 May 2017 00:00:00 +0000</pubDate><description><![CDATA[<h1 id="How%20to%20generate%20and%20manage%20SSH%20keys">How to generate and manage SSH keys</h1>

<p>If you are using short DSA or RSA keys, it&#8217;s time to generate new ones. It
only takes few minutes.</p>

<p>Elliptic Curve Cryptography was implemented in OpenSSH in 2011. It is safe
to assume that ECC is supported by major operating systems today. Consider
upgrading your SSH keys to ECC: the generated keys are smaller, the
algorithm is faster, and the analysis hasn&#8217;t shown any weaknesses, unlike
traditional RSA or DSA.</p>

<p>Run this command to generate your new SSH key pair.</p>

<pre><code>$ ssh-keygen -t ed25519 -a 100
Enter file in which to save the key
(/home/romanzolotarev/.ssh/id_ed25519):
Generating public/private ed25519 key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in ~/.ssh/id_ed25519.
Your public key has been saved in ~/.ssh/id_ed25519.pub.
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx comment
The key&#39;s randomart image is:
+--[ED25519 256]--+
|       .o=@*=    |
|        oX = .=  |
|        * o +    |
|       = o =     |
|        S o +    |
|       * + o     |
|      = X.o.=    |
|       O =+o     |
|      . E++++    |
+----[SHA256]-----+
$
</code></pre>

<p>Done!</p>

<p>Let me clarify those options. For better security, we used Ed25519 keys
with the <code>-t ed25519</code> option and to increase resistance to brute-force
password checking we used a hundred rounds of the key derivation function
(<code>-a 100</code>).</p>

<p>P.S. To protect your private key, use a strong passphrase. <a href="https://www.romanzolotarev.com/diceware.html">A few random common
words should work</a>.</p>

<h2 id="RSA%20fallback">RSA fallback</h2>

<p>If Ed25519 isn&#8217;t yet supported by some of your servers, you can use long
RSA keys as a fallback.</p>

<pre><code>$ ssh-keygen -t rsa -b 4096 -o -a 100
Enter file in which to save the key
(/home/romanzolotarev/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in ~/.ssh/id_rsa.
Your public key has been saved in ~/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx comment
The key&#39;s randomart image is:
+---[RSA 2048]----+
|  .ooo ...ooo    |
|  ..o.+  .o+  E  |
|.o.o.o = . o     |
|.Boo= + +        |
|+ Bo . =S        |
| o . ...+. o     |
|    . o  ++      |
|     o o .o      |
|      + ..*      |
+----[SHA256]-----+
$
</code></pre>

<p>P.S. Option <code>-o</code> enables the new OpenSSH format to increase resistance to
brute-force password checking.</p>

<h2 id="Do%20not%20share%20private%20keys">Do not share private keys</h2>

<p>Don&#8217;t copy or share your private key. Generate a new key pair for every
user and every device. You can use the same key pair for multiple
destinations, though.</p>

<h2 id="Use%20SSH%20configuration">Use SSH configuration</h2>

<p>Add all your frequently used hosts to <code>~/.ssh/config</code>, like this:</p>

<pre><code>Host www
  User webmaster
  Hostname www.romanzolotarev.com
  IdentityFile /home/romanzolotarev/.ssh/id_ed25519
</code></pre>

<p>After adding this to your SSH configuration you can run <code>ssh www</code> instead
of <code>ssh -i ~/.ssh/id_ed25519 webmaster@www.romanzolotarev.com</code>. Neat.</p>

<p>It also helps you to manage your keys; it&#8217;s a good practice to revoke your
keys and generate new ones from time to time.</p>]]></description></item>
</channel></rss>
